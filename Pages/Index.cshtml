@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<!-- Hidden form to generate the anti-forgery token -->
<form method="post">
    @Html.AntiForgeryToken()
</form>

<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CCTV Manager Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
  <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />
</head>

@using System.Text.Json
@{
  var camerasJson = JsonSerializer.Serialize(Model.Cameras);
}

<script type="text/javascript">
// Pass server-side data to JavaScript
window.camerasFromServer = @Html.Raw(camerasJson);
window.serverData = {
    totalCameras: @(Model.TotalCameras),
    activeCameras: @(Model.ActiveCameras),
    totalIn: @(Model.TotalIn),
    totalOut: @(Model.TotalOut),
    totalPresent: @(Model.TotalPresent)
};
</script>

<body class="bg-gray-50 min-h-screen font-sans">

<!-- Mobile Header -->
<header class="lg:hidden bg-white shadow-sm p-4 flex items-center justify-between sticky top-0 z-50">
  <div class="flex items-center gap-3">
    <button onclick="toggleSidebar()" class="text-gray-700 focus:outline-none">
      <i class="fas fa-bars text-xl"></i>
    </button>
    <div class="flex items-center">
      <i class="fas fa-video text-primary-600 text-xl mr-2"></i>
      <h1 class="text-lg font-semibold text-gray-800">CCTV Manager</h1>
    </div>
  </div>
</header>

<!-- Sidebar -->
<nav id="sidebar" class="hidden lg:block w-64 h-screen bg-white text-gray-700 fixed border-r border-gray-200 z-40 flex-col overflow-hidden transition-all duration-300">
  <div class="p-5 border-b border-gray-200 flex items-center space-x-3">
    <i class="fas fa-video text-xl text-primary-600"></i>
    <h1 class="text-xl font-bold text-gray-800">CCTV Manager</h1>
  </div>
  <div class="p-4 flex-1 overflow-y-auto">
    <p class="text-xs uppercase text-gray-500 font-semibold px-4 mb-2">Main Menu</p>
    <ul class="space-y-1">
      <li><a href="#dashboard" class="flex items-center px-4 py-3 rounded-lg bg-primary-50 border-l-3 border-primary-600 text-primary-600">
        <i class="fas fa-tachometer-alt w-5 h-5 mr-3"></i>
        <span>Dashboard</span>
      </a></li>
      <li><a href="/Cameras" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-camera w-5 h-5 mr-3 text-gray-600"></i>
        <span>Cameras</span>
      </a></li>
      <li><a href="/Schedule" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-calendar w-5 h-5 mr-3 text-gray-600"></i>
        <span>Schedules</span>
      </a></li>
      <li><a href="/CountData" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-chart-line w-5 h-5 mr-3 text-gray-600"></i>
        <span>Analytics</span>
      </a></li>
    </ul>
  </div>
</nav>

<!-- Main Content -->
<section id="dashboard" class="lg:ml-64 overflow-auto px-4 py-6 lg:p-8 min-h-screen">
  <!-- Header -->
  <header class="bg-white shadow-sm rounded-xl px-6 py-5 mb-6">
    <div>
      <h1 class="text-xl font-bold text-gray-800">ERP Dashboard</h1>
      
    </div>
  </header>

  <!-- NEW: Current Meal Header -->
  @if (Model.HasActiveSchedule)
  {
    <div class="bg-gradient-to-r from-primary-600 to-primary-700 text-white rounded-xl p-6 mb-6 shadow-lg">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <div class="bg-white bg-opacity-20 p-3 rounded-lg mr-4">
            <i class="fas fa-utensils text-2xl"></i>
          </div>
          <div>
            <h1 class="text-3xl font-bold mb-1" id="currentMealHeader">@Model.CurrentScheduleName</h1>
            <p class="text-primary-100 text-lg">Currently Active Schedule</p>
          </div>
        </div>

      </div>
    </div>
  }
  else
  {
    <div class="bg-gradient-to-r from-gray-500 to-gray-600 text-white rounded-xl p-6 mb-6 shadow-lg">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <div class="bg-white bg-opacity-20 p-3 rounded-lg mr-4">
            <i class="fas fa-clock text-2xl"></i>
          </div>
          <div>
            <h1 class="text-3xl font-bold mb-1" id="currentMealHeader">No Active Schedule</h1>
            <p class="text-gray-100 text-lg">Waiting for next meal schedule</p>
          </div>
        </div>
        <div class="text-right">
          <div class="bg-white bg-opacity-20 rounded-lg p-3">
            <div class="text-gray-100 text-sm">Schedule Status</div>
            <div class="text-white text-xl font-bold flex items-center">
              <i class="fas fa-circle text-gray-400 mr-2" style="font-size: 8px;"></i>
              Inactive
            </div>
            <div class="text-gray-100 text-xs mt-1">
              No schedule running
            </div>
          </div>
        </div>
      </div>
    </div>
  }


  <!-- System Overview Cards -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">Total Cameras</p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="totalCameras">@Model.TotalCameras</span>
          </h2>
        </div>
        <div class="bg-primary-50 p-3 rounded-lg text-primary-600">
          <i class="fas fa-video text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-primary-500 rounded-full" id="totalCamerasProgress" style="width: 75%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2" id="totalCamerasCapacity">@Model.TotalCameras of 32 capacity</p>
      </div>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">Active Cameras</p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="activeCameras">@Model.ActiveCameras</span>
            <span class="text-xs font-medium text-gray-500 ml-2" id="activeCamerasTotal">of @Model.TotalCameras</span>
          </h2>
        </div>
        <div class="bg-green-50 p-3 rounded-lg text-green-600">
          <i class="fas fa-check-circle text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-green-500 rounded-full" id="activeCamerasProgress" style="width: @((Model.TotalCameras > 0 ? (Model.ActiveCameras / (double)Model.TotalCameras) * 100 : 0))%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2" id="activeCamerasPercentage">@(Model.TotalCameras > 0 ? Math.Round((Model.ActiveCameras / (double)Model.TotalCameras) * 100) : 0)% operational</p>
      </div>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">
            @if (Model.HasActiveSchedule)
            {
              <span>People In (@Model.CurrentScheduleName)</span>
            }
            else
            {
              <span>People In (No Active Schedule)</span>
            }
          </p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="peopleIn">@Model.TotalIn</span>
          </h2>
        </div>
        <div class="bg-indigo-50 p-3 rounded-lg text-indigo-600">
          <i class="fas fa-sign-in-alt text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-indigo-500 rounded-full" id="peopleInProgress" style="width: @((Model.TotalIn / 165.0) * 100)%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2" id="peopleInCapacity">@Model.TotalIn of 165 capacity</p>
      </div>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">
            @if (Model.HasActiveSchedule)
            {
              <span>People Out (@Model.CurrentScheduleName)</span>
            }
            else
            {
              <span>People Out (No Active Schedule)</span>
            }
          </p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="peopleOut">@Model.TotalOut</span>
          </h2>
        </div>
        <div class="bg-orange-50 p-3 rounded-lg text-orange-600">
          <i class="fas fa-sign-out-alt text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-orange-500 rounded-full" id="peopleOutProgress" style="width: @(Model.TotalIn > 0 ? (Model.TotalOut / (double)Model.TotalIn) * 100 : 0)%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2" id="peopleOutCapacity">@Model.TotalOut of @Model.TotalIn checked in</p>
      </div>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">
            @if (Model.HasActiveSchedule)
            {
              <span>Current People in Kitchen (@Model.CurrentScheduleName)</span>
            }
            else
            {
              <span>Current People in Kitchen (No Active Schedule)</span>
            }
          </p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="totalPresent">@Model.TotalPresent</span>
          </h2>
        </div>
        <div class="bg-green-50 p-3 rounded-lg text-green-600">
          <i class="fas fa-users text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-green-500 rounded-full" id="currentCountProgress" style="width: @((Model.TotalPresent / 165.0) * 100)%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2">
          <span class="current-people-count">@Model.TotalPresent</span> of 165 capacity
        </p>
      </div>
      <div class="mt-3 flex items-center text-xs">
        @if (Model.HasActiveSchedule)
        {
          <span class="flex items-center text-green-600">
            <i class="fas fa-circle mr-1" style="font-size: 6px;"></i>
            Schedule Active
          </span>
        }
        else
        {
          <span class="flex items-center text-gray-600">
            <i class="fas fa-circle mr-1" style="font-size: 6px;"></i>
            No Active Schedule
          </span>
        }
        <span class="ml-auto text-gray-500" id="lastUpdated">Just now</span>
      </div>
    </div>

    <!-- NEW: Last 5 Minutes Card -->
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100 relative overflow-hidden">
      <div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-purple-400 to-purple-600"></div>
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">
            @if (Model.HasActiveSchedule)
            {
              <span>Last 5 Minutes Activity (@Model.CurrentScheduleName)</span>
            }
            else
            {
              <span>Last 5 Minutes Activity (No Active Schedule)</span>
            }
          </p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="lastFiveMinutesPresent">@Model.LastFiveMinutesPresent</span>
          </h2>
        </div>
        <div class="bg-purple-50 p-3 rounded-lg text-purple-600">
          <i class="fas fa-clock text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="grid grid-cols-2 gap-3 text-xs">
          <div class="bg-purple-50 p-2 rounded">
            <span class="text-purple-600 font-medium">In:</span>
            <span class="text-gray-800 font-bold ml-1" id="lastFiveMinutesIn">@Model.LastFiveMinutesIn</span>
          </div>
          <div class="bg-purple-50 p-2 rounded">
            <span class="text-purple-600 font-medium">Out:</span>
            <span class="text-gray-800 font-bold ml-1" id="lastFiveMinutesOut">@Model.LastFiveMinutesOut</span>
          </div>
        </div>
      </div>
      <div class="mt-3 flex items-center text-xs">
        @if (Model.HasActiveSchedule)
        {
          <span class="flex items-center text-purple-600">
            <i class="fas fa-pulse mr-1" style="font-size: 6px;"></i>
            Recent Activity
          </span>
        }
        else
        {
          <span class="flex items-center text-gray-500">
            <i class="fas fa-pause mr-1" style="font-size: 6px;"></i>
            No Recent Activity
          </span>
        }
        <span class="ml-auto text-gray-500" id="lastFiveMinutesUpdated">5 min window</span>
      </div>
    </div>
  </div>

  <!-- Camera Schedules Section -->
<div class="bg-white p-6 rounded-xl shadow-card border border-gray-100 mb-8">
  <div class="flex justify-between items-center mb-6">
    <h2 class="text-lg font-semibold text-gray-800">Camera Schedules</h2>
    <div class="flex gap-3 items-center">
      <!-- Date Filter -->
      <div class="flex items-center gap-2">
        <label for="scheduleDate" class="text-sm font-medium text-gray-700">Date:</label>
        <input type="date" id="scheduleDate" 
               class="px-3 py-1.5 text-sm border border-gray-300 rounded-lg focus:border-primary-500 focus:ring-primary-500">
      </div>
      
      <!-- Quick Navigation Buttons -->
      <div class="flex gap-1">
        <button onclick="goToYesterday()" 
                class="px-2 py-1.5 text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 rounded transition-colors"
                title="Yesterday">
          <i class="fas fa-chevron-left"></i>
        </button>
        <button onclick="goToToday()" 
                class="px-3 py-1.5 text-xs bg-primary-100 hover:bg-primary-200 text-primary-700 rounded transition-colors"
                title="Today">
          Today
        </button>
      </div>    
    </div>
  </div>



 

   <!-- Schedules Display -->
  <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
    
    <!-- Schedules List (Left 3 columns) -->
    <div class="lg:col-span-3 bg-white rounded-lg border border-gray-200">
      <div class="p-4 border-b border-gray-200">
        <div class="flex justify-between items-center">
          <h3 class="text-md font-medium text-gray-700">
            Schedules for <span id="selectedDateDisplay">Today</span>
          </h3>
          <div class="flex items-center gap-3 text-sm text-gray-500">
            <span id="scheduleCountDisplay">0 schedules</span>
            <button onclick="refreshSchedulesList()" 
                    class="text-primary-600 hover:text-primary-800 ml-2">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
      </div>
      
      <div class="max-h-96 overflow-y-auto">
        <table id="enhancedSchedulesTable" class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50 sticky top-0">
            <tr>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Schedule</th>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Camera</th>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
              <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            </tr>
          </thead>
          <tbody id="enhancedSchedulesTableBody" class="bg-white divide-y divide-gray-200">
            <!-- Dynamic content will be inserted here -->
          </tbody>
        </table>
        
        <!-- Empty State -->
        <div id="noSchedulesForDate" class="hidden p-8 text-center">
          <div class="w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center mx-auto mb-4">
            <i class="fas fa-calendar-times text-2xl text-gray-400"></i>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-2">No schedules found</h3>
          <p class="text-gray-500 mb-4">No schedules are configured for the selected date.</p>
          <button onclick="document.getElementById('scheduleName').focus()" 
                  class="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors text-sm font-medium">
            Create Schedule
          </button>
        </div>
      </div>
    </div>


    </div>
  </div>



@* </div> *@

  <!-- Main Dashboard Grid -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
    
    <!-- Left Column: Quick Actions -->
    <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100">
      <h2 class="text-lg font-semibold text-gray-800 mb-6">Quick Actions</h2>
      <div class="space-y-4">
        <a href="/Cameras" class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 group-hover:bg-primary-200">
            <i class="fas fa-plus"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Add New Camera</h3>
            <p class="text-xs text-gray-500">Configure and connect a new device</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </a>
        
        <a href="/Schedule" class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-green-100 flex items-center justify-center text-green-600 group-hover:bg-green-200">
            <i class="fas fa-calendar-plus"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Create Schedule</h3>
            <p class="text-xs text-gray-500">Set up automated recording times</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </a>
        
        <a href="/CountData" class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-indigo-100 flex items-center justify-center text-indigo-600 group-hover:bg-indigo-200">
            <i class="fas fa-chart-line"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Analytics</h3>
            <p class="text-xs text-gray-500">View detailed reports and data</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </a>
      </div>
    </div>

    <!-- Right Column: Camera Map -->
    <div class="lg:col-span-2 bg-white p-6 rounded-xl shadow-card border border-gray-100">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-lg font-semibold text-gray-800">Camera Locations</h2>
        <div class="flex gap-2">
          <button class="px-3 py-1.5 text-sm bg-primary-50 hover:bg-primary-100 text-primary-700 rounded-lg transition-colors" onclick="updateCameraMapUI()">
            <i class="fas fa-sync-alt mr-2"></i>Refresh
          </button>
        </div>
      </div>
      <div class="relative">
        <div class="h-64 w-full relative bg-gray-50 rounded-lg overflow-hidden border border-gray-100">
          <canvas id="cameraMapChart"></canvas>
        </div>
        <div class="absolute top-3 left-3 bg-white bg-opacity-80 rounded-lg p-2 shadow-sm text-xs font-medium">
          <div class="flex items-center gap-2 mb-1">
            <span class="block w-3 h-3 rounded-full bg-primary-500"></span>
            <span>Active Cameras (<span id="activeCamerasCount">@Model.ActiveCameras</span>)</span>
          </div>
          <div class="flex items-center gap-2">
            <span class="block w-3 h-3 rounded-full bg-gray-300"></span>
            <span>Inactive Cameras (<span id="inactiveCamerasCount">@(Model.TotalCameras - Model.ActiveCameras)</span>)</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Camera Activity Section -->
  <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100 mb-8">
    <div class="flex flex-wrap justify-between items-center mb-6">
      <h2 class="text-lg font-semibold text-gray-800">Camera Activity</h2>
    </div>

    <!-- Form Section -->
    <div class="form-container bg-gray-50 rounded-lg border border-gray-200 mb-6">
      <div class="form-item">
        <label for="Test_DatetimeLocal" class="block text-sm font-medium text-gray-700 mb-2">Date</label>
        <input type="date" id="Test_DatetimeLocal" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="activity_camera" class="block text-sm font-medium text-gray-700 mb-2">Camera Selection</label>
        <select name="activity_camera" id="activity_camera" multiple class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          @foreach (var camera in Model.Cameras)
          {
            <option value="@camera.CameraID">@camera.CameraName</option>
          }
        </select>
      </div>

      <div class="form-item">
        <label for="mealtype" class="block text-sm font-medium text-gray-700 mb-2">Schedule</label>
        <select name="mealtype" id="mealtype" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          <option value="">-- Select a schedule --</option>
        </select>
      </div>

      <div class="form-item flex items-end">
        <button onclick="showPplCount()" class="action-button">
          <i class="fas fa-search mr-2"></i>
          Get Count
        </button>
      </div>
    </div>

    <!-- Results Section -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Chart -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-lg border border-gray-200 p-4 h-full">
          <h3 class="text-md font-medium text-gray-700 mb-4">Hourly Traffic</h3>
          <div class="h-64 chart-container">
            <canvas id="activityChart"></canvas>
          </div>
        </div>
      </div>
      
      <!-- Count Results -->
      <div>
        <div class="bg-white rounded-lg border border-gray-200 p-6 h-full">
          <h3 class="text-md font-medium text-gray-700 mb-4">Count Results</h3>
          <div class="space-y-4">
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="flex justify-between items-center">
                <p class="text-sm text-gray-500">Total Entry Count</p>
                <div class="bg-indigo-50 h-8 w-8 rounded-full flex items-center justify-center">
                  <i class="fas fa-sign-in-alt text-indigo-600"></i>
                </div>
              </div>
              <p class="text-2xl font-bold text-gray-800 mt-2" id="countLabel1">-</p>
            </div>
            
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="flex justify-between items-center">
                <p class="text-sm text-gray-500">Total Exit Count</p>
                <div class="bg-orange-50 h-8 w-8 rounded-full flex items-center justify-center">
                  <i class="fas fa-sign-out-alt text-orange-600"></i>
                </div>
              </div>
              <p class="text-2xl font-bold text-gray-800 mt-2" id="countLabel2">-</p>
            </div>
            
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="flex justify-between items-center">
                <p class="text-sm text-gray-500">Total Count Present Inside</p>
                <div class="bg-green-50 h-8 w-8 rounded-full flex items-center justify-center">
                  <i class="fas fa-users text-green-600"></i>
                </div>
              </div>
              <p class="text-2xl font-bold text-gray-800 mt-2" id="countLabel3">-</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  

</section>

<script src="~/js/index.js" asp-append-version="true"></script>
<script src="~/js/schedule-dashboard-integration.js" asp-append-version="true"></script>

 

<script>
console.log('=== ENHANCED CLICKABLE SCHEDULES ===');

let schedules = [];
let selectedScheduleId = null;

async function loadDailySchedules() {
    try {
        console.log('Loading daily recurring schedules...');
        
        showLoading();
        
        // Call the correct API endpoint
        const response = await fetch('/Index?handler=GetAllSchedules');
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const allSchedules = await response.json();
        console.log('Raw schedules from API:', allSchedules);
        
        // Process schedules for display
        schedules = allSchedules.map(schedule => ({
            ...schedule,
            timeOnly: schedule.timeOnly || new Date(schedule.startTime).toLocaleTimeString('en-US', {
                hour: '2-digit', 
                minute: '2-digit',
                hour12: false
            }),
            endTimeOnly: schedule.endTime || new Date(new Date(schedule.startTime).getTime() + (schedule.durationInSec * 1000)).toLocaleTimeString('en-US', {
                hour: '2-digit', 
                minute: '2-digit',
                hour12: false
            })
        })).sort((a, b) => a.timeOnly.localeCompare(b.timeOnly));
        
        console.log(`Loaded ${schedules.length} daily schedules`);
        
        displaySchedules();
        
        // Auto-select active schedule if any
        await autoSelectActiveSchedule();
        
    } catch (error) {
        console.error('Error loading schedules:', error);
        showError('Failed to load schedules: ' + error.message);
    }
}

async function autoSelectActiveSchedule() {
    try {
        const response = await fetch('/Index?handler=GetCurrentActiveSchedule');
        const result = await response.json();
        
        if (result.success && result.hasActiveSchedule) {
            const activeScheduleId = result.schedule.scheduleID;
            console.log('Auto-selecting active schedule:', activeScheduleId);
            
            // Find and select the active schedule
            const activeSchedule = schedules.find(s => s.scheduleID === activeScheduleId);
            if (activeSchedule) {
                await selectScheduleById(activeScheduleId);
            }
        }
    } catch (error) {
        console.error('Error auto-selecting active schedule:', error);
    }
}

function displaySchedules() {
    const tableBody = document.querySelector('#enhancedSchedulesTableBody') || 
                     document.querySelector('tbody');
    const table = document.querySelector('#enhancedSchedulesTable') || 
                 document.querySelector('table');
    const noSchedulesDiv = document.querySelector('#noSchedulesForDate');
    const countDisplay = document.querySelector('#scheduleCountDisplay');
    
    if (countDisplay) {
        countDisplay.textContent = `${schedules.length} schedules`;
    }
    
    if (!tableBody) {
        console.error('Table body not found');
        return;
    }
    
    tableBody.innerHTML = '';
    
    if (schedules.length === 0) {
        showNoSchedules();
        return;
    }
    
    if (table) table.style.display = 'table';
    if (noSchedulesDiv) {
        noSchedulesDiv.classList.add('hidden');
        noSchedulesDiv.style.display = 'none';
    }
    
    // Create a row for each schedule
    schedules.forEach(schedule => {
        const row = createScheduleRow(schedule);
        tableBody.appendChild(row);
    });
    
    console.log(`Displayed ${schedules.length} schedules in table`);
}

function createScheduleRow(schedule) {
    const row = document.createElement('tr');
    row.className = 'hover:bg-gray-50 cursor-pointer transition-colors schedule-row';
    row.setAttribute('data-schedule-id', schedule.scheduleID);
    
    // Calculate status for this schedule
    const now = new Date();
    const today = now.toDateString();
    
    // Create today's schedule times
    const todayStartTime = new Date();
    const originalStart = new Date(schedule.startTime);
    todayStartTime.setHours(originalStart.getHours(), originalStart.getMinutes(), originalStart.getSeconds(), 0);
    
    const todayEndTime = new Date(todayStartTime.getTime() + (schedule.durationInSec * 1000));
    
    let status = 'upcoming';
    let statusClass = 'bg-blue-100 text-blue-800';
    
    if (now >= todayStartTime && now <= todayEndTime) {
        status = 'active';
        statusClass = 'bg-green-100 text-green-800';
    } else if (now > todayEndTime) {
        status = 'completed';
        statusClass = 'bg-gray-100 text-gray-800';
    }
    
    // Format duration
    const minutes = Math.floor(schedule.durationInSec / 60);
    const seconds = schedule.durationInSec % 60;
    const durationText = minutes > 0 ? `${minutes}m` : `${seconds}s`;
    
    // Click handler for row selection
    row.onclick = () => selectSchedule(schedule, row);
    
    row.innerHTML = `
        <td class="px-4 py-3 whitespace-nowrap text-sm">
            <div class="font-medium text-gray-900">${schedule.timeOnly}</div>
            <div class="text-xs text-gray-500">${schedule.endTimeOnly}</div>
        </td>
        <td class="px-4 py-3 whitespace-nowrap">
            <div class="text-sm font-medium text-gray-900">${schedule.scheduleName}</div>
            <div class="text-xs text-gray-500">Daily Recurring</div>
        </td>
        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">
            <div class="flex items-center">
                <i class="fas fa-video text-gray-400 mr-1"></i>
                ${schedule.cameraName}
            </div>
        </td>
        <td class="px-4 py-3 whitespace-nowrap text-sm text-gray-500">${durationText}</td>
        <td class="px-4 py-3 whitespace-nowrap">
            <span class="px-2 py-1 text-xs rounded-full ${statusClass}">
                <i class="fas fa-circle mr-1" style="font-size: 6px;"></i>
                ${status.charAt(0).toUpperCase() + status.slice(1)}
            </span>
        </td>
    `;
    
    return row;
}

async function selectSchedule(schedule, row) {
    console.log('Selected schedule:', schedule.scheduleName, 'ID:', schedule.scheduleID);
    
    // Remove previous selection
    document.querySelectorAll('.schedule-selected').forEach(el => {
        el.classList.remove('schedule-selected', 'bg-primary-50', 'border-l-4', 'border-primary-500');
    });
    
    // Highlight selected row
    row.classList.add('schedule-selected', 'bg-primary-50', 'border-l-4', 'border-primary-500');
    
    // Store selected schedule ID
    selectedScheduleId = schedule.scheduleID;
    
    // Update dashboard with schedule data
    await updateDashboardForSchedule(schedule.scheduleID);
    
    // Show notification
    showNotification(`Selected: ${schedule.scheduleName}`, 'success');
}

async function selectScheduleById(scheduleId) {
    const schedule = schedules.find(s => s.scheduleID === scheduleId);
    if (schedule) {
        const row = document.querySelector(`[data-schedule-id="${scheduleId}"]`);
        if (row) {
            await selectSchedule(schedule, row);
        }
    }
}

async function updateDashboardForSchedule(scheduleId) {
    try {
        console.log('Updating dashboard for schedule ID:', scheduleId);
        
        // Show loading state on cards
        showCardLoading();
        
        // Get dashboard data for this schedule
        const response = await fetch(`/Index?handler=GetDashboardDataForSelectedSchedule&scheduleId=${scheduleId}`);
        const result = await response.json();
        
        if (result.success) {
            console.log('Dashboard data received:', result);
            
            // Update card headers
            updateCardHeaders(result.scheduleName, result.cameraName, result.status);
            
            // Update card values
            updateCardValues(result.data);
            
            // Update current meal header if applicable
            updateCurrentMealHeader(result);
            
        } else {
            console.error('Failed to get dashboard data:', result.message);
            showNotification('Failed to load schedule data', 'error');
        }
        
    } catch (error) {
        console.error('Error updating dashboard:', error);
        showNotification('Error loading schedule data', 'error');
    }
}

function updateCardHeaders(scheduleName, cameraName, status) {
    // Update the headers of the dashboard cards
    const headers = [
        { 
            selector: '#peopleIn', 
            text: `People In (${scheduleName})`,
            icon: 'fas fa-sign-in-alt'
        },
        { 
            selector: '#peopleOut', 
            text: `People Out (${scheduleName})`,
            icon: 'fas fa-sign-out-alt'
        },
        { 
            selector: '#totalPresent', 
            text: `Current People in Kitchen (${scheduleName})`,
            icon: 'fas fa-users'
        },
        { 
            selector: '#lastFiveMinutesPresent', 
            text: `Last 5 Minutes Activity (${scheduleName})`,
            icon: 'fas fa-clock'
        }
    ];
    
    headers.forEach(header => {
        const element = document.querySelector(header.selector);
        const card = element?.closest('.dashboard-card, .bg-white');
        const label = card?.querySelector('.text-gray-500');
        if (label) {
            label.textContent = header.text;
        }
    });
    
    // Update status indicators if any
    const statusElements = document.querySelectorAll('.current-people-count');
    statusElements.forEach(el => {
        const statusContainer = el.closest('.bg-white')?.querySelector('.mt-3');
        if (statusContainer) {
            const statusText = status === 'active' ? 'Schedule Active' : 
                              status === 'completed' ? 'Schedule Completed' : 'Schedule Upcoming';
            const statusColor = status === 'active' ? 'text-green-600' : 
                               status === 'completed' ? 'text-gray-600' : 'text-blue-600';
            
            const statusSpan = statusContainer.querySelector('span');
            if (statusSpan) {
                statusSpan.className = `flex items-center ${statusColor}`;
                statusSpan.innerHTML = `<i class="fas fa-circle mr-1" style="font-size: 6px;"></i>${statusText}`;
            }
        }
    });
}

function updateCardValues(data) {
    // Update the numeric values in the dashboard cards
    const updates = [
        { id: 'peopleIn', value: data.totalIn },
        { id: 'peopleOut', value: data.totalOut },
        { id: 'totalPresent', value: data.totalPresent },
        { id: 'lastFiveMinutesPresent', value: data.lastFiveMinutesPresent },
        { id: 'lastFiveMinutesIn', value: data.lastFiveMinutesIn },
        { id: 'lastFiveMinutesOut', value: data.lastFiveMinutesOut }
    ];
    
    updates.forEach(({ id, value }) => {
        const element = document.getElementById(id);
        if (element) {
            // Animate the number change
            animateNumberChange(element, parseInt(element.textContent) || 0, value);
        }
    });
    
    // Update progress bars if they exist
    updateProgressBars(data);
    
    // Update additional display elements
    const currentCountElements = document.querySelectorAll('.current-people-count');
    currentCountElements.forEach(el => {
        el.textContent = data.totalPresent;
    });
}

function animateNumberChange(element, fromValue, toValue) {
    const duration = 500; // ms
    const steps = 20;
    const stepValue = (toValue - fromValue) / steps;
    const stepDuration = duration / steps;
    
    let currentStep = 0;
    const interval = setInterval(() => {
        currentStep++;
        const currentValue = Math.round(fromValue + (stepValue * currentStep));
        element.textContent = currentStep === steps ? toValue : currentValue;
        
        if (currentStep >= steps) {
            clearInterval(interval);
        }
    }, stepDuration);
}

function updateProgressBars(data) {
    // Update progress bars based on the data
    const progressUpdates = [
        { id: 'peopleInProgress', value: (data.totalIn / 165) * 100 },
        { id: 'peopleOutProgress', value: data.totalIn > 0 ? (data.totalOut / data.totalIn) * 100 : 0 },
        { id: 'currentCountProgress', value: (data.totalPresent / 165) * 100 }
    ];
    
    progressUpdates.forEach(({ id, value }) => {
        const progressBar = document.getElementById(id);
        if (progressBar) {
            progressBar.style.width = `${Math.min(100, Math.max(0, value))}%`;
        }
    });
    
    // Update capacity text
    const capacityUpdates = [
        { id: 'peopleInCapacity', text: `${data.totalIn} of 165 capacity` },
        { id: 'peopleOutCapacity', text: `${data.totalOut} of ${data.totalIn} checked in` }
    ];
    
    capacityUpdates.forEach(({ id, text }) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = text;
        }
    });
}

function updateCurrentMealHeader(result) {
    // Update the main meal header if it exists
    const mealHeader = document.getElementById('currentMealHeader');
    if (mealHeader && result.isActive) {
        mealHeader.textContent = result.scheduleName;
        
        // Update the header container classes for active state
        const headerContainer = mealHeader.closest('.bg-gradient-to-r');
        if (headerContainer) {
            headerContainer.className = headerContainer.className
                .replace('from-gray-500 to-gray-600', 'from-primary-600 to-primary-700');
        }
    }
}

function showCardLoading() {
    // Show loading state on cards
    const loadingElements = ['peopleIn', 'peopleOut', 'totalPresent', 'lastFiveMinutesPresent'];
    loadingElements.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.innerHTML = '<i class="fas fa-spinner fa-spin text-sm"></i>';
        }
    });
}

function showLoading() {
    const container = findContainer();
    if (container) {
        container.innerHTML = `
            <div class="text-center py-8">
                <i class="fas fa-spinner fa-spin text-2xl text-gray-400 mb-4"></i>
                <p class="text-gray-500">Loading daily schedules...</p>
            </div>
        `;
    }
}

function showNoSchedules() {
    const table = document.querySelector('#enhancedSchedulesTable, table');
    const container = findContainer();
    
    if (table) table.style.display = 'none';
    if (container) {
        container.innerHTML = `
            <div class="text-center py-8">
                <i class="fas fa-calendar-times text-2xl text-gray-400 mb-4"></i>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No schedules found</h3>
                <p class="text-gray-500">No daily schedules configured.</p>
            </div>
        `;
    }
}

function showError(message) {
    const container = findContainer();
    if (container) {
        container.innerHTML = `
            <div class="text-center py-8">
                <i class="fas fa-exclamation-triangle text-2xl text-red-400 mb-4"></i>
                <h3 class="text-lg font-medium text-gray-900 mb-2">Error Loading Schedules</h3>
                <p class="text-gray-500">${message}</p>
                <button onclick="loadDailySchedules()" class="mt-4 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700">
                    Retry
                </button>
            </div>
        `;
    }
}

function findContainer() {
    return document.querySelector('#noSchedulesForDate') || 
           document.querySelector('#enhancedSchedulesTable')?.parentElement ||
           document.querySelector('table')?.parentElement;
}

function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 p-3 rounded-lg shadow-lg text-white text-sm transition-all duration-300`;
    notification.style.backgroundColor = type === 'success' ? '#10b981' : 
                                        type === 'error' ? '#ef4444' : '#3b82f6';
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => notification.style.transform = 'translateX(0)', 10);
    
    // Remove after delay
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// Function to clear selection and reset to default state
function clearScheduleSelection() {
    selectedScheduleId = null;
    
    // Remove selection styling
    document.querySelectorAll('.schedule-selected').forEach(el => {
        el.classList.remove('schedule-selected', 'bg-primary-50', 'border-l-4', 'border-primary-500');
    });
    
    // Reset cards to default state (you might want to load actual current active schedule or show zeros)
    resetCardsToDefault();
    
    showNotification('Schedule selection cleared', 'success');
}

async function resetCardsToDefault() {
    // Check if there's an active schedule and show that, otherwise show zeros
    try {
        const response = await fetch('/Index?handler=GetCurrentActiveSchedule');
        const result = await response.json();
        
        if (result.success && result.hasActiveSchedule) {
            // Auto-select the active schedule
            await selectScheduleById(result.schedule.scheduleID);
        } else {
            // Show default/zero state
            updateCardHeaders('No Active Schedule', '', 'inactive');
            updateCardValues({
                totalIn: 0,
                totalOut: 0,
                totalPresent: 0,
                lastFiveMinutesIn: 0,
                lastFiveMinutesOut: 0,
                lastFiveMinutesPresent: 0
            });
        }
    } catch (error) {
        console.error('Error resetting to default:', error);
    }
}

// Initialize when page loads
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing schedules...');
    setTimeout(loadDailySchedules, 1000); // Small delay to ensure other scripts are loaded
});

// Auto-refresh every 30 seconds to update schedule statuses
setInterval(() => {
    if (schedules.length > 0) {
        displaySchedules(); // Refresh the display to update statuses
        
        // If a schedule is selected, refresh its data
        if (selectedScheduleId) {
            updateDashboardForSchedule(selectedScheduleId);
        }
    }
}, 30000);

// Export functions for global access
window.loadDailySchedules = loadDailySchedules;
window.clearScheduleSelection = clearScheduleSelection;
window.selectScheduleById = selectScheduleById;

console.log('=== ENHANCED CLICKABLE SCHEDULES LOADED ===');
</script>
</body>
</html>