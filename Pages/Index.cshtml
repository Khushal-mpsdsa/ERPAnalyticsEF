@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<!-- Hidden form to generate the anti-forgery token -->
<form method="post">
    @Html.AntiForgeryToken()
</form>

<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CCTV Manager Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#f0f9ff',
              100: '#e0f2fe',
              200: '#bae6fd',
              300: '#7dd3fc',
              400: '#38bdf8',
              500: '#0ea5e9',
              600: '#0284c7',
              700: '#0369a1',
              800: '#075985',
              900: '#0c4a6e',
              950: '#082f49',
            },
            secondary: {
              50: '#f8fafc',
              100: '#f1f5f9',
              200: '#e2e8f0',
              300: '#cbd5e1',
              400: '#94a3b8',
              500: '#64748b',
              600: '#475569',
              700: '#334155',
              800: '#1e293b',
              900: '#0f172a',
              950: '#020617',
            }
          },
          boxShadow: {
            card: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
            'card-hover': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
          },
        }
      }
    }
    
    // API Base URL - Update this to match your backend URL
    const API_BASE_URL = 'https://your-api-url.com/api';
    
    // Global variables for data
    let systemOverviewData = null;
    let camerasData = [];
    let schedulesData = [];
    let activityChart;
    
    // Load initial data when page loads
    document.addEventListener('DOMContentLoaded', function() {
      loadSystemOverview();
      loadCameras();
      loadSchedules();
      initMapChart();
      updateActivityChart();
    });
    
    // API Functions
    async function apiCall(endpoint, method = 'GET', data = null) {
      try {
        const options = {
          method: method,
          headers: {
            'Content-Type': 'application/json',
          }
        };
        
        if (data && method !== 'GET') {
          options.body = JSON.stringify(data);
        }
        
        const response = await fetch(`${API_BASE_URL}${endpoint}`, options);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        return await response.json();
      } catch (error) {
        console.error('API call failed:', error);
        // Return mock data for demonstration
        return getMockData(endpoint);
      }
    }
    
    // Mock data for demonstration (remove when backend is ready)
    function getMockData(endpoint) {
      const mockData = {
        '/system-overview': {
          totalCameras: 24,
          totalCameraCapacity: 32,
          activeCameras: 18,
          peopleIn: 131,
          peopleInCapacity: 165,
          peopleOut: 128,
          totalCamerasTrend: 4,
          activeCamerasTrend: 0,
          peopleInChangeTrend: -12,
          peopleOutTrend: 8
        },
        '/cameras': [
          { id: 1, name: 'Swadhistha Entry', status: 'active', location: { x: 10, y: 20 } },
          { id: 2, name: 'Kitchen Main Door 1', status: 'active', location: { x: 30, y: 40 } },
          { id: 3, name: 'Kitchen Main Door 2', status: 'active', location: { x: 50, y: 25 } },
          { id: 4, name: 'Parking Lot B', status: 'active', location: { x: 70, y: 60 } },
          { id: 5, name: 'Rear Exit', status: 'active', location: { x: 20, y: 80 } },
          { id: 6, name: 'Server Room', status: 'inactive', location: { x: 80, y: 15 } }
        ],
        '/schedules': [
          { id: 1, name: 'Breakfast', startTime: '07:30', duration: 3600, cameras: [2, 3], status: 'active' },
          { id: 2, name: 'Lunch', startTime: '12:00', duration: 5400, cameras: [1, 2], status: 'active' },
          { id: 3, name: 'Dinner', startTime: '18:30', duration: 4800, cameras: [1, 2, 3], status: 'inactive' }
        ]
      };
      return mockData[endpoint] || {};
    }
    
    // Load System Overview Data
    async function loadSystemOverview() {
      const data = await apiCall('/system-overview');
      systemOverviewData = data;
      updateSystemOverviewUI();
    }
    
    // Load Cameras Data
    async function loadCameras() {
      const data = await apiCall('/cameras');
      camerasData = data;
      updateCamerasUI();
    }
    
    // Load Schedules Data
    async function loadSchedules() {
      const data = await apiCall('/schedules');
      schedulesData = data;
      updateSchedulesUI();
    }
    
    // Update System Overview UI
    function updateSystemOverviewUI() {
      if (!systemOverviewData) return;
      
      // Update Total Cameras
      document.getElementById('totalCameras').textContent = systemOverviewData.totalCameras;
      document.getElementById('totalCamerasCapacity').textContent = `${systemOverviewData.totalCameras} of ${systemOverviewData.totalCameraCapacity} capacity`;
      document.getElementById('totalCamerasProgress').style.width = `${(systemOverviewData.totalCameras / systemOverviewData.totalCameraCapacity) * 100}%`;
      document.getElementById('totalCamerasTrend').innerHTML = systemOverviewData.totalCamerasTrend >= 0 
        ? `<i class="fas fa-arrow-up text-xs mr-1"></i>${systemOverviewData.totalCamerasTrend}%`
        : `<i class="fas fa-arrow-down text-xs mr-1"></i>${Math.abs(systemOverviewData.totalCamerasTrend)}%`;
      
      // Update Active Cameras
      document.getElementById('activeCameras').textContent = systemOverviewData.activeCameras;
      document.getElementById('activeCamerasTotal').textContent = `of ${systemOverviewData.totalCameras}`;
      document.getElementById('activeCamerasProgress').style.width = `${(systemOverviewData.activeCameras / systemOverviewData.totalCameras) * 100}%`;
      document.getElementById('activeCamerasPercentage').textContent = `${Math.round((systemOverviewData.activeCameras / systemOverviewData.totalCameras) * 100)}% operational`;
      
      // Update People In
      document.getElementById('peopleIn').textContent = systemOverviewData.peopleIn;
      document.getElementById('peopleInCapacity').textContent = `${systemOverviewData.peopleIn} of ${systemOverviewData.peopleInCapacity} capacity`;
      document.getElementById('peopleInProgress').style.width = `${(systemOverviewData.peopleIn / systemOverviewData.peopleInCapacity) * 100}%`;
      document.getElementById('peopleInTrend').innerHTML = systemOverviewData.peopleInChangeTrend >= 0 
        ? `<i class="fas fa-arrow-up text-xs mr-1"></i>${systemOverviewData.peopleInChangeTrend}%`
        : `<i class="fas fa-arrow-down text-xs mr-1"></i>${Math.abs(systemOverviewData.peopleInChangeTrend)}%`;
      document.getElementById('peopleInTrend').className = systemOverviewData.peopleInChangeTrend >= 0 
        ? "text-sm font-medium text-green-600 ml-2" 
        : "text-sm font-medium text-red-600 ml-2";
      
      // Update People Out
      document.getElementById('peopleOut').textContent = systemOverviewData.peopleOut;
      document.getElementById('peopleOutCapacity').textContent = `${systemOverviewData.peopleOut} of ${systemOverviewData.peopleIn} checked in`;
      document.getElementById('peopleOutProgress').style.width = `${(systemOverviewData.peopleOut / systemOverviewData.peopleIn) * 100}%`;
      document.getElementById('peopleOutTrend').innerHTML = systemOverviewData.peopleOutTrend >= 0 
        ? `<i class="fas fa-arrow-up text-xs mr-1"></i>${systemOverviewData.peopleOutTrend}%`
        : `<i class="fas fa-arrow-down text-xs mr-1"></i>${Math.abs(systemOverviewData.peopleOutTrend)}%`;
    }
    
    // Update Cameras UI
    function updateCamerasUI() {
      if (!camerasData.length) return;
      
      // Update camera selection dropdowns
      const cameraSelects = ['activity_camera', 'cameraname', 'schedule_camera'];
      cameraSelects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (select) {
          select.innerHTML = '';
          camerasData.forEach(camera => {
            const option = document.createElement('option');
            option.value = camera.id;
            option.textContent = camera.name;
            select.appendChild(option);
          });
        }
      });
    }
    
    // Update Schedules UI
    function updateSchedulesUI() {
      if (!schedulesData.length) return;
      
      // Update schedule dropdown
      const scheduleSelect = document.getElementById('mealtype');
      if (scheduleSelect) {
        scheduleSelect.innerHTML = '<option value="">-- Select a schedule --</option>';
        schedulesData.forEach(schedule => {
          const option = document.createElement('option');
          option.value = schedule.id;
          option.textContent = schedule.name;
          scheduleSelect.appendChild(option);
        });
      }
      
      // Update schedules table
      updateSchedulesTable();
    }
    
    // Update Schedules Table
    function updateSchedulesTable() {
      const tbody = document.querySelector('#schedulesTable tbody');
      if (!tbody || !schedulesData.length) return;
      
      tbody.innerHTML = '';
      schedulesData.forEach(schedule => {
        const cameraNames = schedule.cameras.map(cameraId => {
          const camera = camerasData.find(c => c.id === cameraId);
          return camera ? camera.name : `Camera ${cameraId}`;
        }).join(', ');
        
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50';
        row.innerHTML = `
          <td class="py-3 px-4 text-sm text-gray-700">${schedule.name}</td>
          <td class="py-3 px-4 text-sm text-gray-700">${schedule.startTime}</td>
          <td class="py-3 px-4 text-sm text-gray-700">${schedule.duration}s</td>
          <td class="py-3 px-4 text-sm text-gray-700">${cameraNames}</td>
          <td class="py-3 px-4">
            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${schedule.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}">
              ${schedule.status.charAt(0).toUpperCase() + schedule.status.slice(1)}
            </span>
          </td>
          <td class="py-3 px-4 text-right">
            <button class="text-gray-400 hover:text-primary-600 mx-1"><i class="fas fa-edit"></i></button>
            <button class="text-gray-400 hover:text-red-600 mx-1"><i class="fas fa-trash"></i></button>
          </td>
        `;
        tbody.appendChild(row);
      });
    }
    
    async function showPplCount() {
      const selectedCameras = Array.from(document.getElementById('activity_camera').selectedOptions).map(opt => opt.value);
      const selectedSchedule = document.getElementById('mealtype').value;
      const selectedDate = document.getElementById('Test_DatetimeLocal').value;
      
      try {
        const countData = await apiCall('/people-count', 'POST', {
          cameras: selectedCameras,
          schedule: selectedSchedule,
          date: selectedDate
        });
        
        // Update count labels with real data or use mock data
        document.getElementById('countLabel1').textContent = countData.peopleIn || '131';
        document.getElementById('countLabel2').textContent = countData.peopleOut || '128';
        
        // Update the chart
        updateActivityChart();
      } catch (error) {
        console.error('Failed to get people count:', error);
        // Fallback to mock data
        document.getElementById('countLabel1').textContent = '131';
        document.getElementById('countLabel2').textContent = '128';
        updateActivityChart();
      }
    }
    
    function updateActivityChart() {
      const ctx = document.getElementById('activityChart').getContext('2d');
      
      if (activityChart) {
        activityChart.destroy();
      }
      
      activityChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: ['7:00', '8:00', '9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00'],
          datasets: [
            {
              label: 'People In',
              data: [5, 12, 28, 45, 77, 105, 118, 125, 131],
              borderColor: '#0284c7',
              backgroundColor: 'rgba(2, 132, 199, 0.1)',
              tension: 0.4,
              fill: true,
              pointRadius: 3,
              pointHoverRadius: 5,
              borderWidth: 2
            },
            {
              label: 'People Out',
              data: [0, 3, 8, 22, 48, 87, 102, 118, 128],
              borderColor: '#ea580c',
              backgroundColor: 'rgba(234, 88, 12, 0.1)',
              tension: 0.4,
              fill: true,
              pointRadius: 3,
              pointHoverRadius: 5,
              borderWidth: 2
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          aspectRatio: 2.5,
          layout: {
            padding: {
              left: 20,
              right: 20,
              top: 20,
              bottom: 20
            }
          },
          elements: {
            point: {
              radius: 3,
              hoverRadius: 5
            },
            line: {
              borderWidth: 2,
              tension: 0.4
            }
          },
          plugins: {
            legend: {
              position: 'top',
              align: 'center',
              labels: {
                usePointStyle: true,
                padding: 20,
                boxWidth: 12,
                boxHeight: 12
              }
            },
            tooltip: {
              mode: 'index',
              intersect: false,
              backgroundColor: 'rgba(17, 24, 39, 0.9)',
              padding: 12,
              titleFont: {
                size: 14
              },
              bodyFont: {
                size: 13
              },
              cornerRadius: 8,
              displayColors: true
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              min: 0,
              max: 150,
              ticks: {
                stepSize: 20,
                padding: 10,
                color: '#6b7280',
                font: {
                  size: 12
                }
              },
              grid: {
                color: 'rgba(156, 163, 175, 0.2)',
                drawBorder: false
              },
              border: {
                display: false
              }
            },
            x: {
              ticks: {
                padding: 10,
                color: '#6b7280',
                font: {
                  size: 12
                }
              },
              grid: {
                display: false
              },
              border: {
                display: false
              }
            }
          },
          interaction: {
            mode: 'nearest',
            axis: 'x',
            intersect: false
          }
        }
      });
    }
    
    function initMapChart() {
      const ctx = document.getElementById('cameraMapChart').getContext('2d');
      
      // Use camera data if available, otherwise use mock data
      const activeCameras = camerasData.filter(camera => camera.status === 'active').map(camera => ({
        x: camera.location?.x || Math.random() * 80 + 10,
        y: camera.location?.y || Math.random() * 80 + 10
      }));
      
      const inactiveCameras = camerasData.filter(camera => camera.status === 'inactive').map(camera => ({
        x: camera.location?.x || Math.random() * 80 + 10,
        y: camera.location?.y || Math.random() * 80 + 10
      }));
      
      const chart = new Chart(ctx, {
        type: 'scatter',
        data: {
          datasets: [
            {
              label: 'Active Cameras',
              data: activeCameras.length ? activeCameras : [
                { x: 15, y: 25 }, { x: 35, y: 45 }, { x: 55, y: 30 }, { x: 75, y: 65 },
                { x: 25, y: 75 }, { x: 85, y: 20 }, { x: 45, y: 35 }, { x: 80, y: 75 }, { x: 65, y: 55 }
              ],
              backgroundColor: '#0ea5e9',
              radius: 6,
              hoverRadius: 8
            },
            {
              label: 'Inactive Cameras',
              data: inactiveCameras.length ? inactiveCameras : [
                { x: 80, y: 45 }, { x: 20, y: 55 }, { x: 50, y: 75 }
              ],
              backgroundColor: '#d1d5db',
              radius: 6,
              hoverRadius: 8
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          aspectRatio: 2,
          layout: {
            padding: {
              left: 10,
              right: 10,
              top: 10,
              bottom: 10
            }
          },
          scales: {
            x: {
              min: 0,
              max: 100,
              ticks: { display: false },
              grid: { display: false },
              border: { display: false }
            },
            y: {
              min: 0,
              max: 100,
              ticks: { display: false },
              grid: { display: false },
              border: { display: false }
            }
          },
          plugins: {
            tooltip: {
              backgroundColor: 'rgba(17, 24, 39, 0.9)',
              padding: 8,
              cornerRadius: 6,
              callbacks: {
                label: function(context) {
                  if (camerasData.length) {
                    const isActive = context.datasetIndex === 0;
                    const filteredCameras = camerasData.filter(c => (c.status === 'active') === isActive);
                    return filteredCameras[context.dataIndex]?.name || 'Unknown Camera';
                  }
                  
                  const cameras = [
                    'Swadhistha Entry', 'Kitchen Main Door 1', 'Kitchen Main Door 2', 'Parking Lot B',
                    'Rear Exit', 'Server Room', 'Main Entrance', 'Cafeteria', 'Hallway 1',
                    'Hallway 2', 'Office Area A', 'Office Area B'
                  ];
                  const index = (context.datasetIndex * 10 + context.dataIndex) % cameras.length;
                  return cameras[index];
                }
              }
            },
            legend: {
              labels: {
                usePointStyle: true,
                padding: 15,
                boxWidth: 12,
                boxHeight: 12
              }
            }
          }
        }
      });
    }
    
    function toggleSidebar() {
      const sidebar = document.getElementById('sidebar');
      sidebar.classList.toggle('hidden');
      sidebar.classList.toggle('flex');
    }
    
    // Event listeners for camera selection changes
    document.addEventListener('DOMContentLoaded', function() {
      const activityCameraSelect = document.getElementById('activity_camera');
      if (activityCameraSelect) {
        activityCameraSelect.addEventListener('change', function () {
          const selectedOptions = Array.from(this.selectedOptions);
          const selectedCameraIDs = selectedOptions.map(option => option.value);
          console.log("Selected Camera IDs:", selectedCameraIDs);
        });
      }
      
      const cameranameSelect = document.getElementById('cameraname');
      if (cameranameSelect) {
        cameranameSelect.addEventListener('change', function () {
          const selectedOptions = Array.from(this.selectedOptions);
          const selectedCameraIDs = selectedOptions.map(option => option.value);
          console.log("Selected Camera IDs:", selectedCameraIDs);
        });
      }
      
      // Handle window resize to redraw charts properly
      window.addEventListener('resize', function() {
        if (activityChart) {
          activityChart.resize();
        }
      });
    });
  </script>

  <style>
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f9fafb;
    }
    
    .dashboard-card {
      transition: all 0.3s ease;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    
    .dashboard-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    
    select, input {
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }
    
    .form-group {
      display: flex;
      flex-direction: column;
      margin-bottom: 1rem;
    }

    .form-container {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
      padding: 1.5rem;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      background-color: #f9fafb;
      width: 100%;
    }

    .form-item {
      flex: 1;
      min-width: 200px;
    }
    
    .action-button {
      background-color: #0284c7;
      color: white;
      padding: 0.5rem 1.25rem;
      border-radius: 0.375rem;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s;
      border: none;
      cursor: pointer;
    }
    
    .action-button:hover {
      background-color: #0369a1;
      transform: translateY(-1px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    
    .action-button:active {
      transform: translateY(0);
      box-shadow: none;
    }
    
    .active-nav-item {
      background-color: rgba(2, 132, 199, 0.1);
      border-left: 3px solid #0284c7;
      color: #0284c7;
    }
    
    .custom-scrollbar::-webkit-scrollbar {
      width: 5px;
    }
    
    .custom-scrollbar::-webkit-scrollbar-track {
      background: #f1f5f9;
    }
    
    .custom-scrollbar::-webkit-scrollbar-thumb {
      background-color: #cbd5e1;
      border-radius: 20px;
    }
    
    /* Ensure chart container maintains proper dimensions */
    .chart-container {
      position: relative;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
    
    #activityChart {
      max-width: 100%;
      height: auto !important;
    }
    
    #cameraMapChart {
      max-width: 100%;
      height: auto !important;
    }
    
    @@media (max-width: 768px) {
      .form-container {
        flex-direction: column;
      }
    }
  </style>
</head>

@using System.Text.Json
@{
  var camerasJson = JsonSerializer.Serialize(Model.Cameras);
}


<body class="bg-gray-50 min-h-screen font-sans">

<!-- Mobile Header -->
<header class="lg:hidden bg-white shadow-sm p-4 flex items-center justify-between sticky top-0 z-50">
  <div class="flex items-center gap-3">
    <button onclick="toggleSidebar()" class="text-gray-700 focus:outline-none">
      <i class="fas fa-bars text-xl"></i>
    </button>
    <div class="flex items-center">
      <i class="fas fa-video text-primary-600 text-xl mr-2"></i>
      <h1 class="text-lg font-semibold text-gray-800">CCTV Manager</h1>
    </div>
  </div>
  <div>
    <button class="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center">
      <i class="fas fa-user text-gray-600"></i>
    </button>
  </div>
</header>

<!-- Sidebar -->
<nav id="sidebar" class="hidden lg:block w-64 h-screen bg-white text-gray-700 fixed border-r border-gray-200 z-40 flex-col overflow-hidden transition-all duration-300">
  <div class="p-5 border-b border-gray-200 flex items-center space-x-3">
    <i class="fas fa-video text-xl text-primary-600"></i>
    <h1 class="text-xl font-bold text-gray-800">CCTV Manager</h1>
  </div>
  <div class="p-4 flex-1 overflow-y-auto custom-scrollbar">
    <p class="text-xs uppercase text-gray-500 font-semibold px-4 mb-2">Main Menu</p>
    <ul class="space-y-1">
      <li><a href="#dashboard" class="flex items-center px-4 py-3 rounded-lg active-nav-item">
        <i class="fas fa-tachometer-alt w-5 h-5 mr-3"></i>
        <span>Dashboard</span>
      </a></li>
      <li><a href="#cameras" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-camera w-5 h-5 mr-3 text-gray-600"></i>
        <span>Cameras</span>
      </a></li>
      <li><a href="#schedules" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-calendar w-5 h-5 mr-3 text-gray-600"></i>
        <span>Schedules</span>
      </a></li>
      <li><a href="#analytics" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-chart-line w-5 h-5 mr-3 text-gray-600"></i>
        <span>Analytics</span>
      </a></li>
    </ul>
  </div>
  <div class="p-4 border-t border-gray-200">
    <div class="flex items-center">
      <div class="w-10 h-10 rounded-full bg-primary-100 flex items-center justify-center text-primary-600">
        <i class="fas fa-user"></i>
      </div>
      <div class="ml-3">
        <p class="text-sm font-medium text-gray-800">Admin User</p>
        <p class="text-xs text-gray-500">admin@cctvmanager.com</p>
      </div>
      <div class="ml-auto">
        <button class="text-gray-500 hover:text-gray-700 transition-colors">
          <i class="fas fa-sign-out-alt"></i>
        </button>
      </div>
    </div>
  </div>
</nav>

<!-- Main Content -->
<section id="dashboard" class="lg:ml-64 overflow-auto px-4 py-6 lg:p-8 min-h-screen">
  <!-- Top Navigation Bar -->
  <header class="bg-white shadow-sm rounded-xl px-6 py-5 mb-6 flex justify-between items-center">
    <div class="flex items-center gap-4">
      <div>
        <h1 class="text-xl font-bold text-gray-800">ERP Security Dashboard</h1>
        <p class="text-sm text-gray-500">Welcome back, Admin</p>
      </div>
    </div>

  </header>

  <!-- Status Overview -->
  <div class="mb-8">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-lg font-semibold text-gray-800">System Overview</h2>
      <div class="flex items-center gap-2 text-sm">
        <span class="text-gray-500">Last updated:</span>
        <span class="font-medium">May 11, 2025, 10:45 AM</span>
      </div>
    </div>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
        <div class="flex justify-between items-start">
          <div>
            <p class="text-sm font-medium text-gray-500">Total Cameras</p>
            <h2 class="text-2xl font-bold text-gray-800 mt-2 flex items-baseline">
              <span id="totalCameras">24</span>
              <span class="text-sm font-medium text-green-600 ml-2" id="totalCamerasTrend">
                <i class="fas fa-arrow-up text-xs mr-1"></i>4%
              </span>
            </h2>
          </div>
          <div class="bg-primary-50 p-3 rounded-lg text-primary-600">
            <i class="fas fa-video text-xl"></i>
          </div>
        </div>
        <div class="mt-4">
          <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full bg-primary-500 rounded-full" id="totalCamerasProgress" style="width: 75%"></div>
          </div>
          <p class="text-xs font-medium text-gray-500 mt-2" id="totalCamerasCapacity">24 of 32 capacity</p>
        </div>
      </div>
      
      <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
        <div class="flex justify-between items-start">
          <div>
            <p class="text-sm font-medium text-gray-500">Active Cameras</p>
            <h2 class="text-2xl font-bold text-gray-800 mt-2 flex items-baseline">
              <span id="activeCameras">18</span>
              <span class="text-xs font-medium text-gray-500 ml-2" id="activeCamerasTotal">of 24</span>
            </h2>
          </div>
          <div class="bg-green-50 p-3 rounded-lg text-green-600">
            <i class="fas fa-check-circle text-xl"></i>
          </div>
        </div>
        <div class="mt-4">
          <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full bg-green-500 rounded-full" id="activeCamerasProgress" style="width: 75%"></div>
          </div>
          <p class="text-xs font-medium text-gray-500 mt-2" id="activeCamerasPercentage">75% operational</p>
        </div>
      </div>
      
      <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
        <div class="flex justify-between items-start">
          <div>
            <p class="text-sm font-medium text-gray-500">People In</p>
            <h2 class="text-2xl font-bold text-gray-800 mt-2 flex items-baseline">
              <span id="peopleIn">131</span>
              <span class="text-sm font-medium text-red-600 ml-2" id="peopleInTrend">
                <i class="fas fa-arrow-down text-xs mr-1"></i>12%
              </span>
            </h2>
          </div>
          <div class="bg-indigo-50 p-3 rounded-lg text-indigo-600">
            <i class="fas fa-sign-in-alt text-xl"></i>
          </div>
        </div>
        <div class="mt-4">
          <div class="flex justify-between text-xs font-medium mb-1">
            <span class="text-gray-500">Today</span>
            <span class="text-gray-700" id="peopleInCapacity">131 of 165 capacity</span>
          </div>
          <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full bg-indigo-500 rounded-full" id="peopleInProgress" style="width: 79%"></div>
          </div>
        </div>
      </div>
      
      <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
        <div class="flex justify-between items-start">
          <div>
            <p class="text-sm font-medium text-gray-500">People Out</p>
            <h2 class="text-2xl font-bold text-gray-800 mt-2 flex items-baseline">
              <span id="peopleOut">128</span>
              <span class="text-sm font-medium text-green-600 ml-2" id="peopleOutTrend">
                <i class="fas fa-arrow-up text-xs mr-1"></i>8%
              </span>
            </h2>
          </div>
          <div class="bg-orange-50 p-3 rounded-lg text-orange-600">
            <i class="fas fa-sign-out-alt text-xl"></i>
          </div>
        </div>
        <div class="mt-4">
          <div class="flex justify-between text-xs font-medium mb-1">
            <span class="text-gray-500">Today</span>
            <span class="text-gray-700" id="peopleOutCapacity">128 of 131 checked in</span>
          </div>
          <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full bg-orange-500 rounded-full" id="peopleOutProgress" style="width: 97%"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Top Row Cards -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
    <!-- Quick Actions -->
    <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100">
      <h2 class="text-lg font-semibold text-gray-800 mb-6">Quick Actions</h2>
      <div class="space-y-4">
        <button class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 group-hover:bg-primary-200">
            <i class="fas fa-plus"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Add New Camera</h3>
            <p class="text-xs text-gray-500">Configure and connect a new device</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </button>
        
        <button class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-green-100 flex items-center justify-center text-green-600 group-hover:bg-green-200">
            <i class="fas fa-calendar-plus"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Create Schedule</h3>
            <p class="text-xs text-gray-500">Set up automated recording times</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </button>
        
        <button class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-orange-100 flex items-center justify-center text-orange-600 group-hover:bg-orange-200">
            <i class="fas fa-bell"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Configure Alerts</h3>
            <p class="text-xs text-gray-500">Manage notification settings</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </button>
        
        <button class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-indigo-100 flex items-center justify-center text-indigo-600 group-hover:bg-indigo-200">
            <i class="fas fa-download"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Export Reports</h3>
            <p class="text-xs text-gray-500">Download data in multiple formats</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </button>
      </div>
    </div>
    
    <!-- Camera Map moved here before Quick Actions -->
    <div class="lg:col-span-2 bg-white p-6 rounded-xl shadow-card border border-gray-100">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-lg font-semibold text-gray-800">Camera Locations</h2>
        <div class="flex gap-2">
          <button class="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors">
            <i class="fas fa-expand-alt mr-2"></i>Expand
          </button>
          <button class="px-3 py-1.5 text-sm bg-primary-50 hover:bg-primary-100 text-primary-700 rounded-lg transition-colors">
            <i class="fas fa-sync-alt mr-2"></i>Refresh
          </button>
        </div>
      </div>
      <div class="relative">
        <div class="h-64 w-full relative bg-gray-50 rounded-lg overflow-hidden border border-gray-100 chart-container">
          <canvas id="cameraMapChart"></canvas>
        </div>
        <div class="absolute top-3 left-3 bg-white bg-opacity-80 rounded-lg p-2 shadow-sm text-xs font-medium">
          <div class="flex items-center gap-2 mb-1">
            <span class="block w-3 h-3 rounded-full bg-primary-500"></span>
            <span>Active Cameras (18)</span>
          </div>
          <div class="flex items-center gap-2">
            <span class="block w-3 h-3 rounded-full bg-gray-300"></span>
            <span>Inactive Cameras (6)</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Camera Activity Chart -->
  <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100 mb-8">
    <div class="flex flex-wrap justify-between items-center mb-6">
      <h2 class="text-lg font-semibold text-gray-800">Camera Activity</h2>
      <div class="flex gap-3">
        <div class="inline-flex rounded-md shadow-sm">
          <button class="py-1.5 px-3 text-sm font-medium rounded-l-lg bg-primary-600 text-white">Day</button>
          <button class="py-1.5 px-3 text-sm font-medium bg-gray-100 text-gray-600">Week</button>
          <button class="py-1.5 px-3 text-sm font-medium rounded-r-lg bg-gray-100 text-gray-600">Month</button>
        </div>
        <button class="p-1.5 text-gray-400 hover:text-gray-600 bg-gray-50 rounded-md">
          <i class="fas fa-ellipsis-v"></i>
        </button>
      </div>
    </div>

    <div class="form-container bg-gray-50 rounded-lg border border-gray-200 mb-6">
      <div class="form-item">
        <label for="Test_DatetimeLocal" class="block text-sm font-medium text-gray-700 mb-2">Date</label>
        <input type="date" id="Test_DatetimeLocal" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="activity_camera" class="block text-sm font-medium text-gray-700 mb-2">Camera Selection</label>
        <select name="activity_camera" id="activity_camera" multiple class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          <option value="1">Swadhistha Entry</option>
          <option value="2">Kitchen Main Door 1</option>
          <option value="3">Kitchen Main Door 2</option>
          <option value="4">Parking Lot B</option>
          <option value="5">Rear Exit</option>
          <option value="6">Server Room</option>
        </select>
      </div>

      <div class="form-item">
        <label for="mealtype" class="block text-sm font-medium text-gray-700 mb-2">Schedule</label>
        <select name="mealtype" id="mealtype" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          <option value="">-- Select a schedule --</option>
          <option value="1">Breakfast</option>
          <option value="2">Lunch</option>
          <option value="3">Dinner</option>
        </select>
      </div>

      <div class="form-item flex items-end">
        <button onclick="showPplCount()" class="action-button">
          <i class="fas fa-search mr-2"></i>
          Get Count
        </button>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div class="lg:col-span-2">
        <div class="bg-white rounded-lg border border-gray-200 p-4 h-full">
          <h3 class="text-md font-medium text-gray-700 mb-4">Hourly Traffic</h3>
          <div class="h-64 chart-container">
            <canvas id="activityChart"></canvas>
          </div>
        </div>
      </div>
      <div>
        <div class="bg-white rounded-lg border border-gray-200 p-6 h-full">
          <h3 class="text-md font-medium text-gray-700 mb-4">Count Results</h3>
          <div class="space-y-4">
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="flex justify-between items-center">
                <p class="text-sm text-gray-500">In Count</p>
                <div class="bg-indigo-50 h-8 w-8 rounded-full flex items-center justify-center">
                  <i class="fas fa-sign-in-alt text-indigo-600"></i>
                </div>
              </div>
              <p class="text-2xl font-bold text-gray-800 mt-2" id="countLabel1">-</p>
              <div class="mt-2 h-1 w-full bg-gray-200 rounded-full overflow-hidden">
                <div class="h-full bg-indigo-500 rounded-full" style="width: 79%"></div>
              </div>
            </div>
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="flex justify-between items-center">
                <p class="text-sm text-gray-500">Out Count</p>
                <div class="bg-orange-50 h-8 w-8 rounded-full flex items-center justify-center">
                  <i class="fas fa-sign-out-alt text-orange-600"></i>
                </div>
              </div>
              <p class="text-2xl font-bold text-gray-800 mt-2" id="countLabel2">-</p>
              <div class="mt-2 h-1 w-full bg-gray-200 rounded-full overflow-hidden">
                <div class="h-full bg-orange-500 rounded-full" style="width: 97%"></div>
              </div>
            </div>
          </div>
          <div class="mt-4">
            <button class="w-full py-2 px-4 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors text-sm font-medium flex items-center justify-center">
              <i class="fas fa-download mr-2"></i> Export Data
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Camera Details Section -->
  <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100 mb-8">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-lg font-semibold text-gray-800">Camera Details</h2>
      <div>
        <button class="px-3 py-1.5 text-sm bg-primary-50 hover:bg-primary-100 text-primary-700 rounded-lg transition-colors">
          <i class="fas fa-plus mr-2"></i>Add Camera
        </button>
      </div>
    </div>

    <div class="form-container bg-gray-50 rounded-lg border border-gray-200">
      <div class="form-item">
        <label for="DurationSeconds" class="block text-sm font-medium text-gray-700 mb-2">Duration (Seconds)</label>
        <input type="number" id="DurationSeconds" placeholder="Duration in seconds" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="cameraname" class="block text-sm font-medium text-gray-700 mb-2">Camera Name</label>
        <select name="cameraname" id="cameraname" multiple class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          <option value="1">Swadhistha Entry</option>
          <option value="2">Kitchen Main Door 1</option>
          <option value="3">Kitchen Main Door 2</option>
          <option value="4">Parking Lot B</option>
          <option value="5">Rear Exit</option>
          <option value="6">Server Room</option>
        </select>
      </div>
    </div>

    <div class="mt-6 p-5 bg-white rounded-lg border border-gray-200">
      <div class="flex items-center mb-4">
        <div class="w-10 h-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 mr-4">
          <i class="fas fa-camera"></i>
        </div>
        <div>
          <h3 class="text-md font-medium text-gray-800">Camera #12</h3>
          <p class="text-sm text-gray-500">Last updated: 10 minutes ago</p>
        </div>
        <div class="ml-auto">
          <span class="px-2.5 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800">
            Active
          </span>
        </div>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
        <div class="p-4 bg-gray-50 rounded-lg border border-gray-200">
          <p class="text-sm font-medium text-gray-500 mb-1">Name:</p>
          <p class="text-sm text-gray-700">Camera #12</p>
        </div>
        <div class="p-4 bg-gray-50 rounded-lg border border-gray-200">
          <p class="text-sm font-medium text-gray-500 mb-1">Refresh Rate:</p>
          <p class="text-sm text-gray-700">30fps</p>
        </div>
        <div class="p-4 bg-gray-50 rounded-lg border border-gray-200">
          <p class="text-sm font-medium text-gray-500 mb-1">Camera API URL:</p>
          <p class="text-sm text-gray-700">api/cameras/12</p>
        </div>
      </div>
      
      <div class="flex justify-end mt-4 gap-3">
        <button class="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors">
          <i class="fas fa-cog mr-2"></i>Configure
        </button>
        <button class="px-3 py-1.5 text-sm bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors">
          <i class="fas fa-eye mr-2"></i>View Feed
        </button>
      </div>
    </div>
  </div>

  <!-- Camera Schedules Section -->
  <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100 mb-8">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-lg font-semibold text-gray-800">Camera Schedules</h2>
      <div>
        <button class="px-3 py-1.5 text-sm bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors">
          <i class="fas fa-plus mr-2"></i>Add Schedule
        </button>
      </div>
    </div>

    <div class="form-container bg-gray-50 rounded-lg border border-gray-200 mb-6">
      <div class="form-item">
        <label for="schedule_camera_name" class="block text-sm font-medium text-gray-700 mb-2">Schedule Name</label>
        <input type="text" id="schedule_camera_name" placeholder="Enter schedule name" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="schedule_duration" class="block text-sm font-medium text-gray-700 mb-2">Duration (Seconds)</label>
        <input type="number" id="schedule_duration" placeholder="Duration in seconds" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="schedule_time" class="block text-sm font-medium text-gray-700 mb-2">Start Time (24Hr Format)</label>
        <input type="time" id="schedule_time" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="schedule_camera" class="block text-sm font-medium text-gray-700 mb-2">Camera Selection</label>
        <select name="schedule_camera" id="schedule_camera" multiple class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          <option value="1">Swadhistha Entry</option>
          <option value="2">Kitchen Main Door 1</option>
          <option value="3">Kitchen Main Door 2</option>
          <option value="4">Parking Lot B</option>
          <option value="5">Rear Exit</option>
          <option value="6">Server Room</option>
        </select>
      </div>
    </div>

  </div>

  <!-- Footer -->
  <footer class="mt-8 mb-4 px-4 py-6 bg-white rounded-xl shadow-sm border border-gray-100">
    <div class="flex flex-wrap justify-between items-center">
      <div>
        <p class="text-sm text-gray-500">© 2025 Central ICT. All rights reserved.</p>
        <p class="text-xs text-gray-400 mt-1">Version 2.5.3</p>
      </div>
      <div class="flex gap-4 mt-4 md:mt-0">
        <a href="#" class="text-gray-400 hover:text-gray-600 transition-colors">
          <i class="fas fa-question-circle"></i>
        </a>
        <a href="#" class="text-gray-400 hover:text-gray-600 transition-colors">
          <i class="fas fa-cog"></i>
        </a>
        <a href="#" class="text-gray-400 hover:text-gray-600 transition-colors">
          <i class="fas fa-user"></i>
        </a>
      </div>
    </div>
  </footer>
</section>

</body>
</html>
<script>
	document.getElementById('cameraname').addEventListener('change', function () {
		const selectedOptions = Array.from(this.selectedOptions);
		const selectedCameraIDs = selectedOptions.map(option => option.value);
		console.log("Selected Camera IDs:", selectedCameraIDs);

		fetch(`/Index?handler=GetSchedules&cameraId=${selectedCameraIDs[0]}`)
		.then(response => response.json())
		.then(data => {
			const mealTypeSelect = document.getElementById('mealtype');
            mealTypeSelect.innerHTML = ''; 
			data.forEach(schedule => {
                const option = document.createElement('option');
                option.value = schedule.scheduleID; 
                option.textContent = schedule.scheduleName;
                mealTypeSelect.appendChild(option);
            });
		})
		.catch(error => {
			console.error("Error fetching people count:", error);
		});

	});
</script>

<script type="text/javascript">

	function addSchedule() {

		var scheduleName = document.getElementById('scheduleName').value;
    	var timeValue = document.getElementById('startTime').value;
        var duration = parseInt(document.getElementById('duration').value, 10); // Convert duration to integer

        if (!scheduleName || !startTime || isNaN(duration)) {
            alert('Please fill in all fields with valid values!');
            return; // Stop the function if any field is empty or duration is not a number
        }

		// Split time into components
    	var [hours, minutes, seconds] = timeValue.split(':');
    	seconds = seconds || '00';

		var today = new Date();
		var localTime = new Date(
			today.getFullYear(),
			today.getMonth(),
			today.getDate(),
			parseInt(hours),
			parseInt(minutes),
			parseInt(seconds)
		);

		const pad = (n) => n.toString().padStart(2, '0');
    	var formattedLocalDate = `${localTime.getFullYear()}-${pad(localTime.getMonth() + 1)}-${pad(localTime.getDate())}T${pad(localTime.getHours())}:${pad(localTime.getMinutes())}:${pad(localTime.getSeconds())}`;

		const scheduleData = {
			cameraID: 9,
			scheduleName: scheduleName,
			@* startTime: new Date().toISOString(), // ISO 8601 format is important *@
			startTime: formattedLocalDate,
			durationInSec: duration
		};

		fetch('?handler=AddSchedue', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
			},
			body: JSON.stringify(scheduleData)
		})
		.then(response => response.json())
		.then(data => {
			alert("Added Schedule: " + data.count);
		})
		.catch(error => console.error('Error:', error));
	}

	function showPplCount() {
		var schedule = document.getElementById('mealtype');
		var selectedScheduleID = schedule.value;

		fetch(`/Index?handler=GetScheduleByID&scheduleID=${selectedScheduleID}`)
		.then(response => {
    		if (!response.ok) {
      			throw new Error(`Server returned ${response.status}: ${response.statusText}`);
   			 }
    		return response.json();
  		})
		.then(data => {
			if (Array.isArray(data) && data.length > 0) {
				var selectedSchedule;
				data.forEach(schedule => {
					selectedSchedule = schedule;
				}); 
				showPplCount1(selectedSchedule); 
			} 
		})
		.catch(error => {
			console.error('Fetch error:', error);
		});
	}

	function showPplCount1(selectedSchedule1) {

		const selectedOptions = Array.from(document.getElementById("cameraname").selectedOptions);
        const selectedIds = selectedOptions.map(opt => opt.value);

		var scheduleStartTime = selectedSchedule1.startTime; 
		var scheduleDuration = selectedSchedule1.durationInSec;

		var inputDateString = document.getElementById('Test_DatetimeLocal').value;
		var selectedDate1 = new Date(inputDateString);

		var timeOnly = new Date(scheduleStartTime); // scheduleStartTime is like "1900-01-01T12:30:00"
		var hours = timeOnly.getHours();
		var minutes = timeOnly.getMinutes();
		selectedDate1.setHours(hours);
		selectedDate1.setMinutes(minutes);
		var selectedDate2 = new Date(selectedDate1.getTime());
		selectedDate2.setSeconds(selectedDate2.getSeconds() + scheduleDuration);

		var t1 = Math.round(selectedDate1.getTime() / 1000);
		var t2 = Math.round(selectedDate2.getTime() / 1000);  

		const cameraParams = selectedIds.map(id => `cameraIds=${encodeURIComponent(id)}`).join('&');
		const timeParams = `from=${t1}&to=${t2}`;
		const queryString = `${cameraParams}&${timeParams}`;

		fetch(`/Index?handler=GetPeopleCount&${queryString}`)
		.then(response => response.json())
		.then(data => {
			document.getElementById('countLabel1').textContent = data.totalIn;
        	document.getElementById('countLabel2').textContent = data.totalOut;
			document.getElementById('countLabel3').textContent = data.totalPresent;
		})
		.catch(error => {
			console.error("Error fetching people count:", error);
		});
	}
</script>




