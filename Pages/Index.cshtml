@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<!-- Hidden form to generate the anti-forgery token -->
<form method="post">
    @Html.AntiForgeryToken()
</form>

<!DOCTYPE html>
<html lang="en" class="dark">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CCTV Manager Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>

<script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#f0f9ff',
              100: '#e0f2fe',
              200: '#bae6fd',
              300: '#7dd3fc',
              400: '#38bdf8',
              500: '#0ea5e9',
              600: '#0284c7',
              700: '#0369a1',
              800: '#075985',
              900: '#0c4a6e',
              950: '#082f49',
            },
            secondary: {
              50: '#f8fafc',
              100: '#f1f5f9',
              200: '#e2e8f0',
              300: '#cbd5e1',
              400: '#94a3b8',
              500: '#64748b',
              600: '#475569',
              700: '#334155',
              800: '#1e293b',
              900: '#0f172a',
              950: '#020617',
            }
          },
          boxShadow: {
            card: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
            'card-hover': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
          },
        }
      }
    }
    
    // Global variables for data
    let systemOverviewData = null;
    let camerasData = [];
    let schedulesData = [];
    let activityChart;
    let autoRefreshInterval;
    
    // API Functions
    async function apiCall(endpoint, method = 'GET', data = null) {
      try {
        const options = {
          method: method,
          headers: {
            'Content-Type': 'application/json',
          }
        };
        
        if (data && method !== 'GET') {
          options.body = JSON.stringify(data);
        }
        
        const response = await fetch(`/Index?handler=${endpoint}`, options);
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        return await response.json();
      } catch (error) {
        console.error('API call failed:', error);
        throw error;
      }
    }
    
    // Auto refresh function
    function startAutoRefresh() {
      autoRefreshInterval = setInterval(async () => {
        console.log('Auto-refreshing data...');
        await loadSystemOverview();
        await loadCameras();
        await loadSchedules();
        await loadHourlyTrafficData();
      }, 30000); // 30 seconds
    }
    
    function stopAutoRefresh() {
      if (autoRefreshInterval) {
        clearInterval(autoRefreshInterval);
      }
    }
    
    // Load System Overview Data
    async function loadSystemOverview() {
      try {
        const data = await apiCall('SystemOverview');
        systemOverviewData = data;
        updateSystemOverviewUI();
      } catch (error) {
        console.error('Failed to load system overview:', error);
      }
    }
    
    // Load Cameras Data
    async function loadCameras() {
      try {
        const data = await apiCall('CamerasData');
        camerasData = data;
        updateCamerasUI();
        updateCameraMapUI();
      } catch (error) {
        console.error('Failed to load cameras:', error);
        updateCamerasUIFromServerData();
      }
    }
    
    // Load Schedules Data
    async function loadSchedules() {
      try {
        let allSchedules = [];
        if (window.camerasFromServer) {
          for (const camera of window.camerasFromServer) {
            const schedules = await apiCall(`GetSchedules&cameraId=${camera.cameraID}`);
            allSchedules = allSchedules.concat(schedules);
          }
        }
        schedulesData = allSchedules;
        updateSchedulesUI();
        updateSchedulesTable();
      } catch (error) {
        console.error('Failed to load schedules:', error);
      }
    }
    
    // Load hourly traffic data for the last hour
    async function loadHourlyTrafficData() {
      try {
        const allCameraIds = window.camerasFromServer ? window.camerasFromServer.map(c => c.cameraID) : [];
        
        if (allCameraIds.length > 0) {
          const cameraParams = allCameraIds.map(id => `cameraIds=${id}`).join('&');
          const activityData = await apiCall(`LastHourTraffic&${cameraParams}`);
          
          const labels = activityData.map(d => d.hour);
          const peopleInData = activityData.map(d => d.peopleIn);
          const peopleOutData = activityData.map(d => d.peopleOut);
          
          updateActivityChart(labels, peopleInData, peopleOutData);
        }
      } catch (error) {
        console.error('Failed to load hourly traffic data:', error);
        updateActivityChart(); // Fall back to default chart
      }
    }
    
    // Fallback to use server-side camera data
    function updateCamerasUIFromServerData() {
      const cameraSelects = ['activity_camera', 'cameraname', 'schedule_camera'];
      cameraSelects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (select && window.camerasFromServer) {
          select.innerHTML = '';
          window.camerasFromServer.forEach(camera => {
            const option = document.createElement('option');
            option.value = camera.cameraID;
            option.textContent = camera.cameraName;
            select.appendChild(option);
          });
        }
      });
    }
    
    // Update System Overview UI with real data
    function updateSystemOverviewUI() {
      if (!systemOverviewData) return;
      
      // Update Total Cameras
      document.getElementById('totalCameras').textContent = systemOverviewData.totalCameras;
      document.getElementById('totalCamerasCapacity').textContent = `${systemOverviewData.totalCameras} of ${systemOverviewData.totalCameraCapacity} capacity`;
      document.getElementById('totalCamerasProgress').style.width = `${(systemOverviewData.totalCameras / systemOverviewData.totalCameraCapacity) * 100}%`;
      
      // Update Active Cameras
      document.getElementById('activeCameras').textContent = systemOverviewData.activeCameras;
      document.getElementById('activeCamerasTotal').textContent = `of ${systemOverviewData.totalCameras}`;
      document.getElementById('activeCamerasProgress').style.width = `${(systemOverviewData.activeCameras / systemOverviewData.totalCameras) * 100}%`;
      document.getElementById('activeCamerasPercentage').textContent = `${Math.round((systemOverviewData.activeCameras / systemOverviewData.totalCameras) * 100)}% operational`;
      
      // Update People In
      document.getElementById('peopleIn').textContent = systemOverviewData.peopleIn;
      document.getElementById('peopleInCapacity').textContent = `${systemOverviewData.peopleIn} of ${systemOverviewData.peopleInCapacity} capacity`;
      document.getElementById('peopleInProgress').style.width = `${(systemOverviewData.peopleIn / systemOverviewData.peopleInCapacity) * 100}%`;
      
      // Update People Out
      document.getElementById('peopleOut').textContent = systemOverviewData.peopleOut;
      document.getElementById('peopleOutCapacity').textContent = `${systemOverviewData.peopleOut} of ${systemOverviewData.peopleIn} checked in`;
      if (systemOverviewData.peopleIn > 0) {
        document.getElementById('peopleOutProgress').style.width = `${(systemOverviewData.peopleOut / systemOverviewData.peopleIn) * 100}%`;
      }
    }
    
    // Update Cameras UI
    function updateCamerasUI() {
      if (!camerasData.length) return;
      
      const cameraSelects = ['activity_camera', 'cameraname', 'schedule_camera'];
      cameraSelects.forEach(selectId => {
        const select = document.getElementById(selectId);
        if (select) {
          select.innerHTML = '';
          camerasData.forEach(camera => {
            const option = document.createElement('option');
            option.value = camera.id;
            option.textContent = camera.name;
            select.appendChild(option);
          });
        }
      });
    }
    
    // Update camera map with real data
    function updateCameraMapUI() {
      const ctx = document.getElementById('cameraMapChart').getContext('2d');
      
      let activeCameras = [];
      let inactiveCameras = [];
      
      if (camerasData.length > 0) {
        activeCameras = camerasData.filter(camera => camera.status === 'active').map(camera => ({
          x: camera.location?.x || Math.random() * 80 + 10,
          y: camera.location?.y || Math.random() * 80 + 10
        }));
        
        inactiveCameras = camerasData.filter(camera => camera.status === 'inactive').map(camera => ({
          x: camera.location?.x || Math.random() * 80 + 10,
          y: camera.location?.y || Math.random() * 80 + 10
        }));
      } else {
        // Use server data for fallback
        const totalCameras = window.serverData?.totalCameras || 2;
        const activeCamerasCount = window.serverData?.activeCameras || 0;
        
        for (let i = 0; i < activeCamerasCount; i++) {
          activeCameras.push({
            x: Math.random() * 80 + 10,
            y: Math.random() * 80 + 10
          });
        }
        
        for (let i = 0; i < (totalCameras - activeCamerasCount); i++) {
          inactiveCameras.push({
            x: Math.random() * 80 + 10,
            y: Math.random() * 80 + 10
          });
        }
      }
      
      // Update legend
      document.getElementById('activeCamerasCount').textContent = activeCameras.length;
      document.getElementById('inactiveCamerasCount').textContent = inactiveCameras.length;
    }
    
    // Update Schedules UI
    function updateSchedulesUI() {
      if (!schedulesData.length) return;
      
      const scheduleSelect = document.getElementById('mealtype');
      if (scheduleSelect) {
        scheduleSelect.innerHTML = '<option value="">-- Select a schedule --</option>';
        schedulesData.forEach(schedule => {
          const option = document.createElement('option');
          option.value = schedule.scheduleID || schedule.id;
          option.textContent = schedule.scheduleName || schedule.name;
          scheduleSelect.appendChild(option);
        });
      }
    }
    
    // Update schedules table
    function updateSchedulesTable() {
      const tbody = document.getElementById('schedulesTableBody');
      if (!tbody || !schedulesData.length) return;
      
      tbody.innerHTML = '';
      schedulesData.forEach(schedule => {
        const cameraName = window.camerasFromServer?.find(c => c.cameraID === schedule.cameraID)?.cameraName || 'Unknown Camera';
        const startTime = new Date(schedule.startTime).toLocaleTimeString('en-US', { 
          hour12: false, 
          hour: '2-digit', 
          minute: '2-digit', 
          second: '2-digit' 
        });
        
        const row = `
          <tr>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${schedule.scheduleName}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${cameraName}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${startTime}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${schedule.durationInSec}</td>
          </tr>
        `;
        tbody.insertAdjacentHTML('beforeend', row);
      });
    }
    
    // Main showPplCount function
    async function showPplCount() {
      const selectedCameras = Array.from(document.getElementById('activity_camera').selectedOptions).map(opt => parseInt(opt.value));
      const selectedSchedule = document.getElementById('mealtype').value;
      const selectedDate = document.getElementById('Test_DatetimeLocal').value;
      
      if (!selectedCameras.length || !selectedSchedule || !selectedDate) {
        alert('Please select cameras, schedule, and date');
        return;
      }

      try {
        const scheduleData = await apiCall(`GetScheduleByID&scheduleID=${selectedSchedule}`);
        
        if (scheduleData && scheduleData.length > 0) {
          const schedule = scheduleData[0];
          
          const inputDate = new Date(selectedDate);
          const scheduleTime = new Date(schedule.startTime);
          
          inputDate.setHours(scheduleTime.getHours());
          inputDate.setMinutes(scheduleTime.getMinutes());
          
          const startTime = Math.round(inputDate.getTime() / 1000);
          const endTime = startTime + schedule.durationInSec;
          
          const cameraParams = selectedCameras.map(id => `cameraIds=${id}`).join('&');
          const countData = await apiCall(`GetPeopleCount&${cameraParams}&from=${startTime}&to=${endTime}`);
          
          // Update UI
          document.getElementById('countLabel1').textContent = countData.totalIn || 0;
          document.getElementById('countLabel2').textContent = countData.totalOut || 0;
          document.getElementById('countLabel3').textContent = countData.totalPresent || 0;
          
          await updateActivityChartWithData(selectedCameras, inputDate);
        }
      } catch (error) {
        console.error('Failed to get people count:', error);
        alert('Failed to get people count. Please try again.');
      }
    }
    
    // Update activity chart with real data
    async function updateActivityChartWithData(cameraIds, date) {
      try {
        const dateParam = date.toISOString().split('T')[0];
        const cameraParams = cameraIds.map(id => `cameraIds=${id}`).join('&');
        const activityData = await apiCall(`ActivityData&${cameraParams}&date=${dateParam}`);
        
        const labels = activityData.map(d => d.hour);
        const peopleInData = activityData.map(d => d.peopleIn);
        const peopleOutData = activityData.map(d => d.peopleOut);
        
        updateActivityChart(labels, peopleInData, peopleOutData);
      } catch (error) {
        console.error('Failed to load activity data:', error);
        updateActivityChart();
      }
    }
    
    // Updated chart function
    function updateActivityChart(labels = null, peopleInData = null, peopleOutData = null) {
      const ctx = document.getElementById('activityChart').getContext('2d');
      
      if (activityChart) {
        activityChart.destroy();
      }
      
      const chartLabels = labels || ['7:00', '8:00', '9:00', '10:00', '11:00', '12:00', '13:00', '14:00', '15:00'];
      const inData = peopleInData || [5, 12, 28, 45, 77, 105, 118, 125, 131];
      const outData = peopleOutData || [0, 3, 8, 22, 48, 87, 102, 118, 128];
      
      activityChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: chartLabels,
          datasets: [
            {
              label: 'People In',
              data: inData,
              borderColor: '#0284c7',
              backgroundColor: 'rgba(2, 132, 199, 0.1)',
              tension: 0.4,
              fill: true,
              pointRadius: 3,
              pointHoverRadius: 5,
              borderWidth: 2
            },
            {
              label: 'People Out',
              data: outData,
              borderColor: '#ea580c',
              backgroundColor: 'rgba(234, 88, 12, 0.1)',
              tension: 0.4,
              fill: true,
              pointRadius: 3,
              pointHoverRadius: 5,
              borderWidth: 2
            }
          ]
        },
        options: {
          responsive: true,
          maintainAspectRatio: true,
          aspectRatio: 2.5,
          layout: {
            padding: {
              left: 20,
              right: 20,
              top: 20,
              bottom: 20
            }
          },
          plugins: {
            legend: {
              position: 'top',
              align: 'center',
              labels: {
                usePointStyle: true,
                padding: 20,
                boxWidth: 12,
                boxHeight: 12
              }
            },
            tooltip: {
              mode: 'index',
              intersect: false,
              backgroundColor: 'rgba(17, 24, 39, 0.9)',
              padding: 12,
              titleFont: {
                size: 14
              },
              bodyFont: {
                size: 13
              },
              cornerRadius: 8,
              displayColors: true
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              min: 0,
              max: 150,
              ticks: {
                stepSize: 20,
                padding: 10,
                color: '#6b7280',
                font: {
                  size: 12
                }
              },
              grid: {
                color: 'rgba(156, 163, 175, 0.2)',
                drawBorder: false
              },
              border: {
                display: false
              }
            },
            x: {
              ticks: {
                padding: 10,
                color: '#6b7280',
                font: {
                  size: 12
                }
              },
              grid: {
                display: false
              },
              border: {
                display: false
              }
            }
          },
          interaction: {
            mode: 'nearest',
            axis: 'x',
            intersect: false
          }
        }
      });
    }
    
    function toggleSidebar() {
      const sidebar = document.getElementById('sidebar');
      sidebar.classList.toggle('hidden');
      sidebar.classList.toggle('flex');
    }
    
    // Set up event listeners
    document.addEventListener('DOMContentLoaded', function() {
      // Set today's date as default
      const today = new Date().toISOString().split('T')[0];
      document.getElementById('Test_DatetimeLocal').value = today;
      
      // Load initial data
      loadSystemOverview();
      loadCameras();
      loadSchedules();
      loadHourlyTrafficData();
      initMapChart();
      
      // Start auto refresh
      startAutoRefresh();
      
      // Update dashboard with server data immediately
      if (window.serverData) {
          document.getElementById('totalCameras').textContent = window.serverData.totalCameras;
          document.getElementById('activeCameras').textContent = window.serverData.activeCameras;
          document.getElementById('peopleIn').textContent = window.serverData.totalIn;
          document.getElementById('peopleOut').textContent = window.serverData.totalOut;
          
          if (window.serverData.totalCameras > 0) {
              const activePercentage = (window.serverData.activeCameras / window.serverData.totalCameras) * 100;
              document.getElementById('activeCamerasProgress').style.width = `${activePercentage}%`;
              document.getElementById('activeCamerasPercentage').textContent = `${Math.round(activePercentage)}% operational`;
          }
      }
      
      updateCamerasUIFromServerData();
      
      // Camera selection event listeners
      const cameranameSelect = document.getElementById('cameraname');
      if (cameranameSelect) {
        cameranameSelect.addEventListener('change', function () {
          const selectedOptions = Array.from(this.selectedOptions);
          const selectedCameraIDs = selectedOptions.map(option => option.value);

          if (selectedCameraIDs.length > 0) {
            fetch(`/Index?handler=GetSchedules&cameraId=${selectedCameraIDs[0]}`)
            .then(response => response.json())
            .then(data => {
              const mealTypeSelect = document.getElementById('mealtype');
              mealTypeSelect.innerHTML = '<option value="">-- Select a schedule --</option>'; 
              data.forEach(schedule => {
                const option = document.createElement('option');
                option.value = schedule.scheduleID; 
                option.textContent = schedule.scheduleName;
                mealTypeSelect.appendChild(option);
              });
            })
            .catch(error => {
              console.error("Error fetching schedules:", error);
            });
          }
        });
      }
      
      // Clean up on page unload
      window.addEventListener('beforeunload', function() {
        stopAutoRefresh();
      });
    });
</script>

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f9fafb;
    }
    
    .dashboard-card {
      transition: all 0.3s ease;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    
    .dashboard-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }
    
    select, input {
      box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }
    
    .form-group {
      display: flex;
      flex-direction: column;
      margin-bottom: 1rem;
    }

    .form-container {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
      padding: 1.5rem;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      background-color: #f9fafb;
      width: 100%;
    }

    .form-item {
      flex: 1;
      min-width: 200px;
    }
    
    .action-button {
      background-color: #0284c7;
      color: white;
      padding: 0.5rem 1.25rem;
      border-radius: 0.375rem;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      transition: all 0.2s;
      border: none;
      cursor: pointer;
    }
    
    .action-button:hover {
      background-color: #0369a1;
      transform: translateY(-1px);
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }
    
    .chart-container {
      position: relative;
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
    
    #activityChart {
      max-width: 100%;
      height: auto !important;
    }
    
    #cameraMapChart {
      width: 100%;
      height: 200px;
    }
    
    @@media (max-width: 768px) {
      .form-container {
        flex-direction: column;
      }
    }
</style>
</head>

@using System.Text.Json
@{
  var camerasJson = JsonSerializer.Serialize(Model.Cameras);
}

<script type="text/javascript">
// Pass server-side data to JavaScript
window.camerasFromServer = @Html.Raw(camerasJson);
window.serverData = {
    totalCameras: @(Model.TotalCameras),
    activeCameras: @(Model.ActiveCameras),
    totalIn: @(Model.TotalIn),
    totalOut: @(Model.TotalOut),
    totalPresent: @(Model.TotalPresent)
};
</script>

<body class="bg-gray-50 min-h-screen font-sans">

<!-- Mobile Header -->
<header class="lg:hidden bg-white shadow-sm p-4 flex items-center justify-between sticky top-0 z-50">
  <div class="flex items-center gap-3">
    <button onclick="toggleSidebar()" class="text-gray-700 focus:outline-none">
      <i class="fas fa-bars text-xl"></i>
    </button>
    <div class="flex items-center">
      <i class="fas fa-video text-primary-600 text-xl mr-2"></i>
      <h1 class="text-lg font-semibold text-gray-800">CCTV Manager</h1>
    </div>
  </div>
</header>

<!-- Sidebar -->
<nav id="sidebar" class="hidden lg:block w-64 h-screen bg-white text-gray-700 fixed border-r border-gray-200 z-40 flex-col overflow-hidden transition-all duration-300">
  <div class="p-5 border-b border-gray-200 flex items-center space-x-3">
    <i class="fas fa-video text-xl text-primary-600"></i>
    <h1 class="text-xl font-bold text-gray-800">CCTV Manager</h1>
  </div>
  <div class="p-4 flex-1 overflow-y-auto">
    <p class="text-xs uppercase text-gray-500 font-semibold px-4 mb-2">Main Menu</p>
    <ul class="space-y-1">
      <li><a href="#dashboard" class="flex items-center px-4 py-3 rounded-lg bg-primary-50 border-l-3 border-primary-600 text-primary-600">
        <i class="fas fa-tachometer-alt w-5 h-5 mr-3"></i>
        <span>Dashboard</span>
      </a></li>
      <li><a href="/Cameras" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-camera w-5 h-5 mr-3 text-gray-600"></i>
        <span>Cameras</span>
      </a></li>
      <li><a href="/Schedule" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-calendar w-5 h-5 mr-3 text-gray-600"></i>
        <span>Schedules</span>
      </a></li>
      <li><a href="/CountData" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
        <i class="fas fa-chart-line w-5 h-5 mr-3 text-gray-600"></i>
        <span>Analytics</span>
      </a></li>
    </ul>
  </div>
</nav>

<!-- Main Content -->
<section id="dashboard" class="lg:ml-64 overflow-auto px-4 py-6 lg:p-8 min-h-screen">
  <!-- Header -->
  <header class="bg-white shadow-sm rounded-xl px-6 py-5 mb-6">
    <div>
      <h1 class="text-xl font-bold text-gray-800">ERP Security Dashboard</h1>
      <p class="text-sm text-gray-500">Welcome back, Admin</p>
    </div>
  </header>

  <!-- System Overview Cards -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">Total Cameras</p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="totalCameras">@Model.TotalCameras</span>
          </h2>
        </div>
        <div class="bg-primary-50 p-3 rounded-lg text-primary-600">
          <i class="fas fa-video text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-primary-500 rounded-full" id="totalCamerasProgress" style="width: 75%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2" id="totalCamerasCapacity">@Model.TotalCameras of 32 capacity</p>
      </div>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">Active Cameras</p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="activeCameras">@Model.ActiveCameras</span>
            <span class="text-xs font-medium text-gray-500 ml-2" id="activeCamerasTotal">of @Model.TotalCameras</span>
          </h2>
        </div>
        <div class="bg-green-50 p-3 rounded-lg text-green-600">
          <i class="fas fa-check-circle text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-green-500 rounded-full" id="activeCamerasProgress" style="width: 0%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2" id="activeCamerasPercentage">0% operational</p>
      </div>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">People In</p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="peopleIn">@Model.TotalIn</span>
          </h2>
        </div>
        <div class="bg-indigo-50 p-3 rounded-lg text-indigo-600">
          <i class="fas fa-sign-in-alt text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-indigo-500 rounded-full" id="peopleInProgress" style="width: 0%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2" id="peopleInCapacity">@Model.TotalIn of 165 capacity</p>
      </div>
    </div>
    
    <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
      <div class="flex justify-between items-start">
        <div>
          <p class="text-sm font-medium text-gray-500">People Out</p>
          <h2 class="text-2xl font-bold text-gray-800 mt-2">
            <span id="peopleOut">@Model.TotalOut</span>
          </h2>
        </div>
        <div class="bg-orange-50 p-3 rounded-lg text-orange-600">
          <i class="fas fa-sign-out-alt text-xl"></i>
        </div>
      </div>
      <div class="mt-4">
        <div class="h-2 w-full bg-gray-100 rounded-full overflow-hidden">
          <div class="h-full bg-orange-500 rounded-full" id="peopleOutProgress" style="width: 0%"></div>
        </div>
        <p class="text-xs font-medium text-gray-500 mt-2" id="peopleOutCapacity">@Model.TotalOut of @Model.TotalIn checked in</p>
      </div>
    </div>
  </div>

  <!-- Main Dashboard Grid -->
  <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
    
    <!-- Left Column: Quick Actions -->
    <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100">
      <h2 class="text-lg font-semibold text-gray-800 mb-6">Quick Actions</h2>
      <div class="space-y-4">
        <a href="/Cameras" class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 group-hover:bg-primary-200">
            <i class="fas fa-plus"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Add New Camera</h3>
            <p class="text-xs text-gray-500">Configure and connect a new device</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </a>
        
        <a href="/Schedule" class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-green-100 flex items-center justify-center text-green-600 group-hover:bg-green-200">
            <i class="fas fa-calendar-plus"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Create Schedule</h3>
            <p class="text-xs text-gray-500">Set up automated recording times</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </a>
        
        <a href="/CountData" class="w-full flex items-center p-4 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
          <div class="w-10 h-10 rounded-lg bg-indigo-100 flex items-center justify-center text-indigo-600 group-hover:bg-indigo-200">
            <i class="fas fa-chart-line"></i>
          </div>
          <div class="ml-4 text-left">
            <h3 class="font-medium text-gray-800">Analytics</h3>
            <p class="text-xs text-gray-500">View detailed reports and data</p>
          </div>
          <i class="fas fa-chevron-right ml-auto text-gray-400 group-hover:text-primary-500"></i>
        </a>
      </div>
    </div>

    <!-- Right Column: Camera Map -->
    <div class="lg:col-span-2 bg-white p-6 rounded-xl shadow-card border border-gray-100">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-lg font-semibold text-gray-800">Camera Locations</h2>
        <div class="flex gap-2">
          <button class="px-3 py-1.5 text-sm bg-primary-50 hover:bg-primary-100 text-primary-700 rounded-lg transition-colors" onclick="updateCameraMapUI()">
            <i class="fas fa-sync-alt mr-2"></i>Refresh
          </button>
        </div>
      </div>
      <div class="relative">
        <div class="h-64 w-full relative bg-gray-50 rounded-lg overflow-hidden border border-gray-100">
          <canvas id="cameraMapChart"></canvas>
        </div>
        <div class="absolute top-3 left-3 bg-white bg-opacity-80 rounded-lg p-2 shadow-sm text-xs font-medium">
          <div class="flex items-center gap-2 mb-1">
            <span class="block w-3 h-3 rounded-full bg-primary-500"></span>
            <span>Active Cameras (<span id="activeCamerasCount">@Model.ActiveCameras</span>)</span>
          </div>
          <div class="flex items-center gap-2">
            <span class="block w-3 h-3 rounded-full bg-gray-300"></span>
            <span>Inactive Cameras (<span id="inactiveCamerasCount">@(Model.TotalCameras - Model.ActiveCameras)</span>)</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Camera Activity Section -->
  <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100 mb-8">
    <div class="flex flex-wrap justify-between items-center mb-6">
      <h2 class="text-lg font-semibold text-gray-800">Camera Activity</h2>
    </div>

    <!-- Form Section -->
    <div class="form-container bg-gray-50 rounded-lg border border-gray-200 mb-6">
      <div class="form-item">
        <label for="Test_DatetimeLocal" class="block text-sm font-medium text-gray-700 mb-2">Date</label>
        <input type="date" id="Test_DatetimeLocal" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="activity_camera" class="block text-sm font-medium text-gray-700 mb-2">Camera Selection</label>
        <select name="activity_camera" id="activity_camera" multiple class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          @foreach (var camera in Model.Cameras)
          {
            <option value="@camera.CameraID">@camera.CameraName</option>
          }
        </select>
      </div>

      <div class="form-item">
        <label for="mealtype" class="block text-sm font-medium text-gray-700 mb-2">Schedule</label>
        <select name="mealtype" id="mealtype" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          <option value="">-- Select a schedule --</option>
        </select>
      </div>

      <div class="form-item flex items-end">
        <button onclick="showPplCount()" class="action-button">
          <i class="fas fa-search mr-2"></i>
          Get Count
        </button>
      </div>
    </div>

    <!-- Results Section -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Chart -->
      <div class="lg:col-span-2">
        <div class="bg-white rounded-lg border border-gray-200 p-4 h-full">
          <h3 class="text-md font-medium text-gray-700 mb-4">Hourly Traffic</h3>
          <div class="h-64 chart-container">
            <canvas id="activityChart"></canvas>
          </div>
        </div>
      </div>
      
      <!-- Count Results -->
      <div>
        <div class="bg-white rounded-lg border border-gray-200 p-6 h-full">
          <h3 class="text-md font-medium text-gray-700 mb-4">Count Results</h3>
          <div class="space-y-4">
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="flex justify-between items-center">
                <p class="text-sm text-gray-500">Total Entry Count</p>
                <div class="bg-indigo-50 h-8 w-8 rounded-full flex items-center justify-center">
                  <i class="fas fa-sign-in-alt text-indigo-600"></i>
                </div>
              </div>
              <p class="text-2xl font-bold text-gray-800 mt-2" id="countLabel1">-</p>
            </div>
            
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="flex justify-between items-center">
                <p class="text-sm text-gray-500">Total Exit Count</p>
                <div class="bg-orange-50 h-8 w-8 rounded-full flex items-center justify-center">
                  <i class="fas fa-sign-out-alt text-orange-600"></i>
                </div>
              </div>
              <p class="text-2xl font-bold text-gray-800 mt-2" id="countLabel2">-</p>
            </div>
            
            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
              <div class="flex justify-between items-center">
                <p class="text-sm text-gray-500">Total Count Present Inside</p>
                <div class="bg-green-50 h-8 w-8 rounded-full flex items-center justify-center">
                  <i class="fas fa-users text-green-600"></i>
                </div>
              </div>
              <p class="text-2xl font-bold text-gray-800 mt-2" id="countLabel3">-</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Camera Schedules Section -->
  <div class="bg-white p-6 rounded-xl shadow-card border border-gray-100 mb-8">
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-lg font-semibold text-gray-800">Camera Schedules</h2>
      <div>
        <a href="/Schedule" class="px-3 py-1.5 text-sm bg-primary-600 hover:bg-primary-700 text-white rounded-lg transition-colors">
          <i class="fas fa-plus mr-2"></i>Add Schedule
        </a>
      </div>
    </div>

    <div class="form-container bg-gray-50 rounded-lg border border-gray-200 mb-6">
      <div class="form-item">
        <label for="scheduleName" class="block text-sm font-medium text-gray-700 mb-2">Schedule Name</label>
        <input type="text" id="scheduleName" placeholder="Enter schedule name" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="duration" class="block text-sm font-medium text-gray-700 mb-2">Duration (Seconds)</label>
        <input type="number" id="duration" min="1" placeholder="Duration in seconds" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="startTime" class="block text-sm font-medium text-gray-700 mb-2">Start Time (24hr Format)</label>
        <input type="time" id="startTime" step="1" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
      </div>

      <div class="form-item">
        <label for="schedule_camera" class="block text-sm font-medium text-gray-700 mb-2">Camera Selection</label>
        <select name="schedule_camera" id="schedule_camera" class="block w-full rounded-md border border-gray-300 bg-white py-2.5 px-4 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-sm">
          <option value="">-- Select Camera --</option>
          @foreach (var camera in Model.Cameras)
          {
            <option value="@camera.CameraID">@camera.CameraName</option>
          }
        </select>
      </div>

      <div class="form-item flex items-end">
        <button onclick="addQuickSchedule()" class="action-button">
          <i class="fas fa-plus mr-2"></i>
          Add Schedule
        </button>
      </div>
    </div>

    <!-- Existing Schedules Table -->
    <div class="bg-white rounded-lg border border-gray-200 p-4">
      <h3 class="text-md font-medium text-gray-700 mb-4">Existing Schedules</h3>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Schedule Name</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Camera</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Time</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration (s)</th>
            </tr>
          </thead>
          <tbody id="schedulesTableBody" class="bg-white divide-y divide-gray-200">
            @foreach (var schedule in Model.AllSchedules)
            {
              <tr>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@schedule.ScheduleName</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  @{
                    var camera = Model.Cameras.FirstOrDefault(c => c.CameraID == schedule.CameraID);
                  }
                  @(camera?.CameraName ?? "Unknown Camera")
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@schedule.StartTime.ToString("HH:mm:ss")</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@schedule.DurationInSec</td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>

</section>

<script>
// Function to add quick schedule
function addQuickSchedule() {
    var scheduleName = document.getElementById('scheduleName').value;
    var timeValue = document.getElementById('startTime').value;
    var duration = parseInt(document.getElementById('duration').value, 10);
    var cameraId = parseInt(document.getElementById('schedule_camera').value, 10);

    if (!scheduleName || !timeValue || isNaN(duration) || isNaN(cameraId)) {
        alert('Please fill in all fields with valid values!');
        return;
    }

    var [hours, minutes, seconds] = timeValue.split(':');
    seconds = seconds || '00';

    var today = new Date();
    var localTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes), parseInt(seconds));
    const pad = (n) => n.toString().padStart(2, '0');
    var formattedLocalDate = `${localTime.getFullYear()}-${pad(localTime.getMonth() + 1)}-${pad(localTime.getDate())}T${pad(localTime.getHours())}:${pad(localTime.getMinutes())}:${pad(localTime.getSeconds())}`;

    const scheduleData = {
        cameraID: cameraId,
        scheduleName: scheduleName,
        startTime: formattedLocalDate,
        durationInSec: duration
    };

    fetch('/Schedule?handler=AddSchedule', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
        },
        body: JSON.stringify(scheduleData)
    })
    .then(response => response.json())
    .then(data => {
        alert("Schedule added: " + data.count);
        // Clear form
        document.getElementById('scheduleName').value = '';
        document.getElementById('startTime').value = '';
        document.getElementById('duration').value = '';
        document.getElementById('schedule_camera').value = '';
        // Refresh schedules
        loadSchedules();
    })
    .catch(error => {
        console.error('Error adding schedule:', error);
        alert("Error adding schedule: " + error.message);
    });
}

// Initialize camera map chart
function initMapChart() {
  const ctx = document.getElementById('cameraMapChart').getContext('2d');
  
  let activeCameras = [];
  let inactiveCameras = [];
  
  // Use server data
  const totalCameras = window.serverData?.totalCameras || 2;
  const activeCamerasCount = window.serverData?.activeCameras || 0;
  
  for (let i = 0; i < activeCamerasCount; i++) {
    activeCameras.push({
      x: Math.random() * 80 + 10,
      y: Math.random() * 80 + 10
    });
  }
  
  for (let i = 0; i < (totalCameras - activeCamerasCount); i++) {
    inactiveCameras.push({
      x: Math.random() * 80 + 10,
      y: Math.random() * 80 + 10
    });
  }
  
  const chart = new Chart(ctx, {
    type: 'scatter',
    data: {
      datasets: [
        {
          label: `Active Cameras (${activeCameras.length})`,
          data: activeCameras,
          backgroundColor: '#0ea5e9',
          radius: 6,
          hoverRadius: 8
        },
        {
          label: `Inactive Cameras (${inactiveCameras.length})`,
          data: inactiveCameras,
          backgroundColor: '#d1d5db',
          radius: 6,
          hoverRadius: 8
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      aspectRatio: 2,
      scales: {
        x: {
          min: 0,
          max: 100,
          ticks: { display: false },
          grid: { display: false },
          border: { display: false }
        },
        y: {
          min: 0,
          max: 100,
          ticks: { display: false },
          grid: { display: false },
          border: { display: false }
        }
      },
      plugins: {
        tooltip: {
          backgroundColor: 'rgba(17, 24, 39, 0.9)',
          padding: 8,
          cornerRadius: 6,
          callbacks: {
            label: function(context) {
              const isActive = context.datasetIndex === 0;
              return isActive ? 'Active Camera' : 'Inactive Camera';
            }
          }
        },
        legend: {
          labels: {
            usePointStyle: true,
            padding: 15,
            boxWidth: 12,
            boxHeight: 12
          }
        }
      }
    }
  });
}
</script>

</body>
</html>