@page
@model ScheduleModel
@{
    ViewData["Title"] = "Schedule Management";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Schedule Management - CCTV Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js"></script>
    
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            200: '#bae6fd',
                            300: '#7dd3fc',
                            400: '#38bdf8',
                            500: '#0ea5e9',
                            600: '#0284c7',
                            700: '#0369a1',
                            800: '#075985',
                            900: '#0c4a6e',
                            950: '#082f49',
                        }
                    }
                }
            }
        }
    </script>
    
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb;
        }
        
        .dashboard-card {
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        .dashboard-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        
        .action-button {
            background-color: #0284c7;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 0.5rem;
            font-weight: 500;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            border: none;
            cursor: pointer;
            text-decoration: none;
        }
        
        .action-button:hover {
            background-color: #0369a1;
            transform: translateY(-1px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        
        .form-input {
            border: 1px solid #d1d5db;
            border-radius: 0.5rem;
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
            transition: all 0.2s;
            background-color: white;
            width: 100%;
        }
        
        .form-input:focus {
            outline: none;
            border-color: #0284c7;
            box-shadow: 0 0 0 3px rgba(2, 132, 199, 0.1);
        }
        
        .schedule-status {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }
        
        .schedule-status.upcoming {
            background-color: #dbeafe;
            color: #1e40af;
        }
        
        .schedule-status.active {
            background-color: #d1fae5;
            color: #065f46;
        }
        
        .schedule-status.completed {
            background-color: #f3f4f6;
            color: #374151;
        }
    </style>
</head>

<body class="bg-gray-50 min-h-screen">
    <!-- Sidebar -->
    <nav class="hidden lg:block w-64 h-screen bg-white text-gray-700 fixed border-r border-gray-200 z-40 flex-col overflow-hidden">
        <div class="p-5 border-b border-gray-200 flex items-center space-x-3">
            <i class="fas fa-video text-xl text-primary-600"></i>
            <h1 class="text-xl font-bold text-gray-800">CCTV Manager</h1>
        </div>
        <div class="p-4 flex-1 overflow-y-auto">
            <p class="text-xs uppercase text-gray-500 font-semibold px-4 mb-2">Main Menu</p>
            <ul class="space-y-1">
                <li><a href="/Index" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
                    <i class="fas fa-tachometer-alt w-5 h-5 mr-3 text-gray-600"></i>
                    <span>Dashboard</span>
                </a></li>
                <li><a href="/Cameras" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
                    <i class="fas fa-camera w-5 h-5 mr-3 text-gray-600"></i>
                    <span>Cameras</span>
                </a></li>
                <li><a href="/Schedule" class="flex items-center px-4 py-3 rounded-lg bg-primary-50 border-l-3 border-primary-600 text-primary-600">
                    <i class="fas fa-calendar w-5 h-5 mr-3"></i>
                    <span>Schedules</span>
                </a></li>
                <li><a href="/CountData" class="flex items-center px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors">
                    <i class="fas fa-chart-line w-5 h-5 mr-3 text-gray-600"></i>
                    <span>Analytics</span>
                </a></li>
            </ul>
        </div>
    </nav>

    <!-- Main Content -->
    <section class="lg:ml-64 px-4 py-6 lg:p-8 min-h-screen">
        <!-- Header -->
        <header class="bg-white shadow-sm rounded-xl px-6 py-5 mb-6 dashboard-card">
            <div class="flex items-center justify-between">
                <div>
                    <h1 class="text-2xl font-bold text-gray-800">Schedule Management</h1>
                    <p class="text-sm text-gray-500 mt-1">Create and manage camera recording schedules</p>
                </div>
                <a href="/Index" class="action-button">
                    <i class="fas fa-arrow-left mr-2"></i>
                    Back to Dashboard
                </a>
            </div>
        </header>

        <!-- Schedule Statistics -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-500">Total Schedules</p>
                        <h3 class="text-2xl font-bold text-gray-800 mt-2" id="totalSchedules">0</h3>
                    </div>
                    <div class="bg-primary-50 p-3 rounded-lg text-primary-600">
                        <i class="fas fa-calendar-alt text-xl"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-500">Active Today</p>
                        <h3 class="text-2xl font-bold text-gray-800 mt-2" id="activeToday">0</h3>
                    </div>
                    <div class="bg-green-50 p-3 rounded-lg text-green-600">
                        <i class="fas fa-play-circle text-xl"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-500">Cameras Covered</p>
                        <h3 class="text-2xl font-bold text-gray-800 mt-2">@Model.Cameras.Count</h3>
                    </div>
                    <div class="bg-blue-50 p-3 rounded-lg text-blue-600">
                        <i class="fas fa-video text-xl"></i>
                    </div>
                </div>
            </div>
            
            <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-500">Avg Duration</p>
                        <h3 class="text-2xl font-bold text-gray-800 mt-2" id="avgDuration">0<span class="text-sm text-gray-500">min</span></h3>
                    </div>
                    <div class="bg-purple-50 p-3 rounded-lg text-purple-600">
                        <i class="fas fa-clock text-xl"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Add Schedule Form -->
            <div class="lg:col-span-1">
                <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100">
                    <div class="flex items-center mb-6">
                        <div class="w-10 h-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 mr-4">
                            <i class="fas fa-plus"></i>
                        </div>
                        <div>
                            <h2 class="text-lg font-semibold text-gray-800">Create Schedule</h2>
                            <p class="text-sm text-gray-500">Set up automated recording</p>
                        </div>
                    </div>
                    
                    <form id="scheduleForm" class="space-y-4">
                        <div>
                            <label for="cameraSelect" class="block text-sm font-medium text-gray-700 mb-2">Select Camera</label>
                            <select id="cameraSelect" class="form-input" onchange="loadSchedules()">
                                <option value="">-- Select Camera --</option>
                                @foreach (var camera in Model.Cameras)
                                {
                                    <option value="@camera.CameraID">@camera.CameraName</option>
                                }
                            </select>
                        </div>
                        
                        <div>
                            <label for="scheduleName" class="block text-sm font-medium text-gray-700 mb-2">Schedule Name</label>
                            <input type="text" id="scheduleName" class="form-input" placeholder="Enter schedule name" />
                        </div>
                        
                        <div>
                            <label for="duration" class="block text-sm font-medium text-gray-700 mb-2">Duration (seconds)</label>
                            <input type="number" id="duration" min="1" class="form-input" placeholder="Duration in seconds" oninput="validateDuration(event)" />
                            <p class="text-xs text-gray-500 mt-1">Minimum 1 second</p>
                        </div>
                        
                        <div>
                            <label for="startTime" class="block text-sm font-medium text-gray-700 mb-2">Start Time (24hr format)</label>
                            <input type="time" id="startTime" class="form-input" step="1" />
                        </div>
                        
                        <button type="button" onclick="addSchedule()" class="action-button w-full">
                            <i class="fas fa-plus mr-2"></i>
                            Add Schedule
                        </button>
                    </form>
                </div>

                <!-- Quick Actions -->
                <div class="bg-white p-6 rounded-xl shadow-card dashboard-card border border-gray-100 mt-6">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">Quick Actions</h3>
                    <div class="space-y-3">
                        <button class="w-full flex items-center justify-between p-3 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
                            <div class="flex items-center">
                                <div class="w-8 h-8 rounded-lg bg-green-100 flex items-center justify-center text-green-600 mr-3">
                                    <i class="fas fa-copy"></i>
                                </div>
                                <span class="text-sm font-medium text-gray-800">Duplicate Schedule</span>
                            </div>
                            <i class="fas fa-chevron-right text-gray-400 group-hover:text-primary-500"></i>
                        </button>
                        
                        <button class="w-full flex items-center justify-between p-3 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
                            <div class="flex items-center">
                                <div class="w-8 h-8 rounded-lg bg-blue-100 flex items-center justify-center text-blue-600 mr-3">
                                    <i class="fas fa-download"></i>
                                </div>
                                <span class="text-sm font-medium text-gray-800">Export Schedules</span>
                            </div>
                            <i class="fas fa-chevron-right text-gray-400 group-hover:text-primary-500"></i>
                        </button>
                        
                        <button class="w-full flex items-center justify-between p-3 rounded-lg border border-gray-200 hover:border-primary-300 bg-white hover:bg-primary-50 transition-colors group">
                            <div class="flex items-center">
                                <div class="w-8 h-8 rounded-lg bg-purple-100 flex items-center justify-center text-purple-600 mr-3">
                                    <i class="fas fa-cog"></i>
                                </div>
                                <span class="text-sm font-medium text-gray-800">Bulk Operations</span>
                            </div>
                            <i class="fas fa-chevron-right text-gray-400 group-hover:text-primary-500"></i>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Schedule List -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-xl shadow-card dashboard-card border border-gray-100">
                    <div class="p-6 border-b border-gray-200">
                        <div class="flex items-center justify-between">
                            <div>
                                <h2 class="text-lg font-semibold text-gray-800">Existing Schedules</h2>
                                <p class="text-sm text-gray-500">Manage your camera schedules</p>
                            </div>
                            <div class="flex items-center gap-2">
                                <button class="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-lg transition-colors">
                                    <i class="fas fa-filter mr-2"></i>Filter
                                </button>
                                <button class="px-3 py-1.5 text-sm bg-primary-50 hover:bg-primary-100 text-primary-700 rounded-lg transition-colors" onclick="loadSchedules()">
                                    <i class="fas fa-sync-alt mr-2"></i>Refresh
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="overflow-x-auto">
                        <table id="scheduleTable" class="min-w-full divide-y divide-gray-200" style="display: none;">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Schedule</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Camera</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                <!-- Dynamic content will be inserted here -->
                            </tbody>
                        </table>
                        
                        <div id="noSchedulesMessage" class="p-12 text-center">
                            <div class="w-16 h-16 rounded-full bg-gray-100 flex items-center justify-center mx-auto mb-4">
                                <i class="fas fa-calendar-alt text-2xl text-gray-400"></i>
                            </div>
                            <h3 class="text-lg font-medium text-gray-900 mb-2">No schedules found</h3>
                            <p class="text-gray-500 mb-4">Select a camera to view its schedules or create a new one</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Schedule Timeline -->
        <div class="mt-8 bg-white rounded-xl shadow-card dashboard-card border border-gray-100">
            <div class="p-6 border-b border-gray-200">
                <h2 class="text-lg font-semibold text-gray-800">Today's Schedule Timeline</h2>
                <p class="text-sm text-gray-500">Visual overview of today's recording schedules</p>
            </div>
            <div class="p-6">
                <div class="relative">
                    <!-- Timeline will be rendered here -->
                    <div id="scheduleTimeline" class="h-20 bg-gray-50 rounded-lg flex items-center justify-center">
                        <p class="text-gray-500">Select a camera to view timeline</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Anti-forgery token form -->
    <form method="post">
        @Html.AntiForgeryToken()
    </form>

    <script>
        function validateDuration(e) {
            if (e.target.value < 1) {
                e.target.value = 1;
            }
        }

        function addSchedule() {
            var scheduleName = document.getElementById('scheduleName').value;
            var timeValue = document.getElementById('startTime').value;
            var duration = parseInt(document.getElementById('duration').value, 10);
            var cameraId = parseInt(document.getElementById('cameraSelect').value, 10);

            if (!scheduleName || !timeValue || isNaN(duration) || isNaN(cameraId)) {
                alert('Please fill in all fields with valid values!');
                return;
            }

            var [hours, minutes, seconds] = timeValue.split(':');
            seconds = seconds || '00';

            var today = new Date();
            var localTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes), parseInt(seconds));
            const pad = (n) => n.toString().padStart(2, '0');
            var formattedLocalDate = `${localTime.getFullYear()}-${pad(localTime.getMonth() + 1)}-${pad(localTime.getDate())}T${pad(localTime.getHours())}:${pad(localTime.getMinutes())}:${pad(localTime.getSeconds())}`;

            const scheduleData = {
                cameraID: cameraId,
                scheduleName: scheduleName,
                startTime: formattedLocalDate,
                durationInSec: duration
            };

            fetch('Schedule?handler=AddSchedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(scheduleData)
            })
            .then(response => response.json())
            .then(data => {
                alert("Schedule added: " + data.count);
                loadSchedules();
                clearForm();
                updateStatistics();
            })
            .catch(error => {
                console.error('Error adding schedule:', error);
                alert("Schedule error: " + error);
            });
        }

        function clearForm() {
            document.getElementById('scheduleName').value = '';
            document.getElementById('startTime').value = '';
            document.getElementById('duration').value = '';
        }

        function formatDateTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit',
                hour12: true
            });
        }

        function getScheduleStatus(startTime, duration) {
            const now = new Date();
            const scheduleStart = new Date(startTime);
            const scheduleEnd = new Date(scheduleStart.getTime() + duration * 1000);
            
            if (now < scheduleStart) {
                return { status: 'upcoming', text: 'Upcoming' };
            } else if (now >= scheduleStart && now <= scheduleEnd) {
                return { status: 'active', text: 'Active' };
            } else {
                return { status: 'completed', text: 'Completed' };
            }
        }

        function loadSchedules() {
            var cameraId = document.getElementById('cameraSelect').value;
            if (!cameraId) {
                document.getElementById("scheduleTable").style.display = "none";
                document.getElementById("noSchedulesMessage").style.display = "block";
                return;
            }

            fetch(`Schedule?handler=GetSchedules&cameraId=${cameraId}`)
                .then(response => response.json())
                .then(data => {
                    const tbody = document.querySelector("#scheduleTable tbody");
                    tbody.innerHTML = "";
                    
                    if (data.length > 0) {
                        data.forEach(s => {
                            const statusInfo = getScheduleStatus(s.startTime, s.durationInSec);
                            const row = `<tr class="hover:bg-gray-50 transition-colors">
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <div class="flex items-center">
                                                    <div class="w-10 h-10 rounded-lg bg-primary-100 flex items-center justify-center text-primary-600 mr-4">
                                                        <i class="fas fa-calendar"></i>
                                                    </div>
                                                    <div>
                                                        <div class="text-sm font-medium text-gray-900">${s.scheduleName}</div>
                                                        <div class="text-sm text-gray-500">ID: ${s.scheduleID}</div>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                <div class="flex items-center">
                                                    <i class="fas fa-video text-gray-400 mr-2"></i>
                                                    Camera ${s.cameraID}
                                                </div>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${formatDateTime(s.startTime)}</td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                                <span class="inline-flex items-center">
                                                    <i class="fas fa-clock text-gray-400 mr-1"></i>
                                                    ${Math.floor(s.durationInSec / 60)}m ${s.durationInSec % 60}s
                                                </span>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap">
                                                <span class="schedule-status ${statusInfo.status}">
                                                    <i class="fas fa-circle mr-1 text-xs"></i>
                                                    ${statusInfo.text}
                                                </span>
                                            </td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                <div class="flex items-center gap-2">
                                                    <button class="text-primary-600 hover:text-primary-900 transition-colors p-2 rounded-lg hover:bg-primary-50" title="Edit">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="text-green-600 hover:text-green-900 transition-colors p-2 rounded-lg hover:bg-green-50" title="View">
                                                        <i class="fas fa-eye"></i>
                                                    </button>
                                                    <button class="text-red-600 hover:text-red-900 transition-colors p-2 rounded-lg hover:bg-red-50" title="Delete">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                         </tr>`;
                            tbody.insertAdjacentHTML('beforeend', row);
                        });
                        document.getElementById("scheduleTable").style.display = "table";
                        document.getElementById("noSchedulesMessage").style.display = "none";
                    } else {
                        document.getElementById("scheduleTable").style.display = "none";
                        document.getElementById("noSchedulesMessage").style.display = "block";
                    }
                    updateStatistics();
                })
                .catch(error => console.error("Failed to load schedules:", error));
        }

        function updateStatistics() {
            // Update statistics cards
            const tbody = document.querySelector("#scheduleTable tbody");
            const scheduleCount = tbody ? tbody.children.length : 0;
            
            document.getElementById('totalSchedules').textContent = scheduleCount;
            
            // Calculate other statistics (this is a simplified version)
            // In a real application, you'd fetch this data from the server
            document.getElementById('activeToday').textContent = Math.floor(scheduleCount * 0.3);
            document.getElementById('avgDuration').innerHTML = '45<span class="text-sm text-gray-500">min</span>';
        }

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            updateStatistics();
            
            // Auto-load schedules if a camera is pre-selected
            if (document.getElementById('cameraSelect').value) {
                loadSchedules();
            }
        });
    </script>
</body>
</html>

<script>
    function validateDuration(e) {
        if (e.target.value < 1) {
            e.target.value = 1;
        }
    }

    function addSchedule() {
        var scheduleName = document.getElementById('scheduleName').value;
        var timeValue = document.getElementById('startTime').value;
        var duration = parseInt(document.getElementById('duration').value, 10);
        var cameraId = parseInt(document.getElementById('cameraSelect').value, 10);

        if (!scheduleName || !timeValue || isNaN(duration) || isNaN(cameraId)) {
            alert('Please fill in all fields with valid values!');
            return;
        }

        var [hours, minutes, seconds] = timeValue.split(':');
        seconds = seconds || '00';

        var today = new Date();
        var localTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), parseInt(hours), parseInt(minutes), parseInt(seconds));
        const pad = (n) => n.toString().padStart(2, '0');
        var formattedLocalDate = `${localTime.getFullYear()}-${pad(localTime.getMonth() + 1)}-${pad(localTime.getDate())}T${pad(localTime.getHours())}:${pad(localTime.getMinutes())}:${pad(localTime.getSeconds())}`;

        const scheduleData = {
            cameraID: cameraId,
            scheduleName: scheduleName,
            startTime: formattedLocalDate,
            durationInSec: duration
        };

        fetch('Schedule?handler=AddSchedule', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify(scheduleData)
        })
        .then(response => response.json())
        .then(data => {
            alert("Schedule added: " + data.count);
            loadSchedules(); // Refresh the schedule list
        })
        .catch(error => alert("Schedule error: " + error));
    }

    function formatDateTime(dateString) {
        const date = new Date(dateString);
        return date.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit',
            hour12: true
        });
    }

    function loadSchedules() {
        var cameraId = document.getElementById('cameraSelect').value;
        if (!cameraId) {
            document.getElementById("scheduleTable").style.display = "none";
            return;
        }

        fetch(`Schedule?handler=GetSchedules&cameraId=${cameraId}`)
            .then(response => response.json())
            .then(data => {
                const tbody = document.querySelector("#scheduleTable tbody");
                tbody.innerHTML = "";
                data.forEach(s => {
                    const row = `<tr>
                                    <td>${s.scheduleName}</td>
                                    <td>${formatDateTime(s.startTime)}</td>
                                    <td>${s.durationInSec}</td>
                                 </tr>`;
                    tbody.insertAdjacentHTML('beforeend', row);
                });
                document.getElementById("scheduleTable").style.display = data.length > 0 ? "table" : "none";
            })
            .catch(error => console.error("Failed to load schedules:", error));
    }

    // Optional: Auto-load schedules for the first camera on page load
    window.onload = function () {
        if (document.getElementById('cameraSelect').value) {
            loadSchedules();
        }
    };
</script>